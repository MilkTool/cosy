// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["cosy"] = $hx_exports["cosy"] || {};
$hx_exports["cosy"]["Cosy"] = $hx_exports["cosy"]["Cosy"] || {};
var $estr = function() { return js.Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js.Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
var cosy = {};
cosy.AstPrinter = class cosy_AstPrinter {
	constructor() {
		this.isInClass = false;
		this.indentAmount = 0;
	}
	indent() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.indentAmount;
		while(_g1 < _g2) {
			++_g1;
			_g.push("  ");
		}
		return _g.join("");
	}
	printBlock(statements) {
		this.indentAmount++;
		var _g = [];
		var _g1 = 0;
		while(_g1 < statements.length) {
			var stmt = statements[_g1++];
			_g.push(this.indent() + this.printStmt(stmt));
		}
		var s = _g.join("\n");
		this.indentAmount--;
		return "{\n" + s + "\n" + this.indent() + "}";
	}
	printExprBlock(exprs) {
		this.indentAmount++;
		var _g = [];
		var _g1 = 0;
		while(_g1 < exprs.length) {
			var expr = exprs[_g1++];
			_g.push(this.indent() + this.printExpr(expr));
		}
		var s = _g.join("\n");
		this.indentAmount--;
		return "{\n" + s + "\n" + this.indent() + "}";
	}
	printStmt(statement) {
		switch(statement._hx_index) {
		case 0:
			return this.printBlock(statement.statements);
		case 1:
			var _g19 = statement.superclass;
			var declaration = "class " + statement.name.lexeme;
			var declaration1 = _g19 != null ? " < " + this.printExpr(_g19) : "";
			this.isInClass = true;
			var body = this.printBlock(statement.methods);
			this.isInClass = false;
			return "" + (declaration + declaration1) + " " + body;
		case 2:
			return "" + this.printExpr(statement.e);
		case 3:
			var _g6 = statement.name;
			return "for " + (_g6 != null ? _g6.lexeme + " in" : "") + this.printExpr(statement.from) + ".." + this.printExpr(statement.to) + " " + this.printBlock(statement.body);
		case 4:
			return "for " + statement.name.lexeme + " in " + this.printExpr(statement.array) + " " + this.printBlock(statement.body);
		case 5:
			var _g = statement.cond;
			return "for " + (_g != null ? this.printExpr(_g) : "") + " " + this.printBlock(statement.body);
		case 6:
			var _g23 = statement.body;
			var _g22 = statement.params;
			var declaration2 = "" + (this.isInClass ? "" : "fn ") + statement.name.lexeme;
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < _g22.length) _g1.push(this.formatParam(_g22[_g11++]));
			return "" + declaration2 + "(" + _g1.join(", ") + ") " + this.printBlock(_g23);
		case 7:
			var _g4 = statement.el;
			return "if " + this.printExpr(statement.cond) + " " + this.printStmt(statement.then) + (_g4 != null ? " else " + this.printStmt(_g4) : "");
		case 8:
			var _g12 = statement.init;
			return "mut " + statement.name.lexeme + (_g12 != null ? " = " + this.printExpr(_g12) : "");
		case 9:
			return "print " + this.printExpr(statement.e);
		case 10:
			var _g29 = statement.value;
			return "return" + (_g29 != null ? " " + this.printExpr(_g29) : "");
		case 11:
			return "struct " + statement.name.lexeme + " " + this.printBlock(statement.declarations);
		case 12:
			var _g17 = statement.init;
			return "var " + statement.name.lexeme + (_g17 != null ? " = " + this.printExpr(_g17) : "");
		}
	}
	printExpr(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g4 = expr.exprs;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g4.length) _g.push(this.printExpr(_g4[_g1++]));
			return "[" + _g.join(",") + "]";
		case 1:
			return "" + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 2:
			return "" + this.printExpr(expr.left) + " " + expr.op.lexeme + " " + this.printExpr(expr.right);
		case 3:
			var _g14 = expr.$arguments;
			var tmp = "" + this.printExpr(expr.callee) + "(";
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < _g14.length) _g2.push(this.printExpr(_g14[_g11++]));
			return tmp + _g2.join(", ") + ")";
		case 4:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme;
		case 5:
			return "(" + this.printExpr(expr.e) + ")";
		case 6:
			var _g7 = expr.v;
			if(typeof(_g7) == "string") {
				return "'" + Std.string(_g7) + "'";
			} else {
				return "" + Std.string(_g7);
			}
			break;
		case 7:
			return "" + this.printExpr(expr.left) + " " + (expr.op.type._hx_index == 34 ? "or" : "and") + " " + this.printExpr(expr.right);
		case 8:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 9:
			return "this";
		case 10:
			return "super." + expr.method.lexeme;
		case 11:
			return this.printExprBlock(expr.decls);
		case 12:
			return "" + expr.op.lexeme + this.printExpr(expr.right);
		case 13:
			return expr.name.lexeme;
		case 14:
			var _g26 = expr.body;
			var _g25 = expr.params;
			var _g3 = [];
			var _g12 = 0;
			while(_g12 < _g25.length) _g3.push(this.formatParam(_g25[_g12++]));
			return "fn (" + _g3.join(",") + ") " + this.printStmt(cosy.Stmt.Block(_g26));
		}
	}
	formatType(type) {
		switch(type._hx_index) {
		case 0:
			return "";
		case 2:
			return "Bool";
		case 3:
			return "Num";
		case 4:
			return "Str";
		case 6:
			var _g1 = type.paramTypes;
			var _g = [];
			var _g11 = 0;
			while(_g11 < _g1.length) _g.push(this.formatType(_g1[_g11++]));
			return "Fn(" + _g.join(", ") + ")";
		case 7:
			return StringTools.trim("Array " + this.formatType(type.type));
		default:
			return "" + Std.string(type);
		}
	}
	formatParam(param) {
		var typeStr = this.formatType(param.type);
		return param.name.lexeme + (typeStr != "" ? " " + typeStr : "");
	}
}
cosy.AstPrinter.__name__ = true;
Object.assign(cosy.AstPrinter.prototype, {
	__class__: cosy.AstPrinter
});
cosy.Callable = class cosy_Callable {
}
cosy.Callable.__name__ = true;
Object.assign(cosy.Callable.prototype, {
	__class__: cosy.Callable
});
cosy.Interpreter = class cosy_Interpreter {
	constructor() {
		this.locals = new haxe.ds.ObjectMap();
		this.globals = new cosy.Environment();
		this.globals.define("clock",new cosy._Interpreter.ClockCallable());
		this.globals.define("random",new cosy._Interpreter.RandomCallable());
		this.globals.define("str_length",new cosy._Interpreter.StringLengthCallable());
		this.globals.define("str_charAt",new cosy._Interpreter.StringCharAtCallable());
		this.globals.define("input",new cosy._Interpreter.InputCallable());
		this.environment = this.globals;
	}
	interpret(statements) {
		try {
			var _g = 0;
			while(_g < statements.length) this.execute(statements[_g++]);
		} catch( e ) {
			var e1 = ((e) instanceof js._Boot.HaxeError) ? e.val : e;
			if(((e1) instanceof cosy.RuntimeError)) {
				cosy.Cosy.runtimeError(e1);
			} else {
				throw e;
			}
		}
	}
	execute(statement) {
		switch(statement._hx_index) {
		case 0:
			this.executeBlock(statement.statements,new cosy.Environment(this.environment));
			break;
		case 1:
			var _g20 = statement.methods;
			var _g19 = statement.superclass;
			var _g18 = statement.name;
			var superclass;
			if(_g19 != null) {
				var sc = this.evaluate(_g19);
				if(!((sc) instanceof cosy.Klass)) {
					var this1;
					if(_g19._hx_index == 13) {
						this1 = _g19.name;
					} else {
						throw new js._Boot.HaxeError("unreachable");
					}
					throw new js._Boot.HaxeError(new cosy.RuntimeError(this1,"Superclass must be a class"));
				}
				superclass = sc;
			} else {
				superclass = null;
			}
			this.environment.define(_g18.lexeme,null);
			if(superclass != null) {
				this.environment = new cosy.Environment(this.environment);
				this.environment.define("super",superclass);
			}
			var methods = new haxe.ds.StringMap();
			var _g = 0;
			while(_g < _g20.length) {
				var method = _g20[_g];
				++_g;
				if(method._hx_index == 6) {
					var _g1 = method.name;
					var func = new cosy.Function(_g1,method.params,method.body,this.environment,_g1.lexeme == "init");
					var key = _g1.lexeme;
					if(__map_reserved[key] != null) {
						methods.setReserved(key,func);
					} else {
						methods.h[key] = func;
					}
				}
			}
			var klass = new cosy.Klass(_g18.lexeme,superclass,methods);
			if(superclass != null) {
				this.environment = this.environment.enclosing;
			}
			this.environment.assign(_g18,klass);
			break;
		case 2:
			this.evaluate(statement.e);
			break;
		case 3:
			var _g9 = statement.body;
			var _g6 = statement.name;
			var _g5 = statement.keyword;
			var fromVal = this.evaluate(statement.from);
			if(typeof(fromVal) != "number") {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g5),"Number expected in \"from\" clause of loop.");
			}
			var toVal = this.evaluate(statement.to);
			if(typeof(toVal) != "number") {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g5),"Number expected in \"to\" clause of loop.");
			}
			var env = new cosy.Environment(this.environment);
			var _g2 = fromVal;
			var _g11 = toVal;
			while(_g2 < _g11) {
				var counter = _g2++;
				if(_g6 != null) {
					env.define(_g6.lexeme,counter);
				}
				this.executeBlock(_g9,env);
			}
			break;
		case 4:
			var _g32 = statement.body;
			var _g30 = statement.name;
			var arr = this.evaluate(statement.array);
			var env1 = new cosy.Environment(this.environment);
			var _g3 = 0;
			while(_g3 < arr.length) {
				env1.define(_g30.lexeme,arr[_g3++]);
				this.executeBlock(_g32,env1);
			}
			break;
		case 5:
			var _g12 = statement.body;
			var _g4 = statement.cond;
			var env2 = new cosy.Environment(this.environment);
			while(_g4 != null ? this.isTruthy(this.evaluate(_g4)) : true) this.executeBlock(_g12,env2);
			break;
		case 6:
			var _g21 = statement.name;
			this.environment.define(_g21.lexeme,new cosy.Function(_g21,statement.params,statement.body,this.environment,false));
			break;
		case 7:
			var _g41 = statement.el;
			if(this.isTruthy(this.evaluate(statement.cond))) {
				this.execute(statement.then);
			} else if(_g41 != null) {
				this.execute(_g41);
			}
			break;
		case 8:
			var _g121 = statement.init;
			var value = cosy.Interpreter.uninitialized;
			if(_g121 != null) {
				value = this.evaluate(_g121);
			}
			this.environment.define(statement.name.lexeme,value);
			break;
		case 9:
			cosy.Cosy.println(this.stringify(this.evaluate(statement.e)));
			break;
		case 10:
			var _g29 = statement.value;
			throw new js._Boot.HaxeError(new cosy.Return(_g29 == null ? null : this.evaluate(_g29)));
		case 11:
			var _g14 = statement.declarations;
			var _g13 = statement.name;
			this.environment.define(_g13.lexeme,null);
			var previousEnv = this.environment;
			this.environment = new cosy.Environment(this.environment);
			var fields = new haxe.ds.StringMap();
			var _g7 = 0;
			while(_g7 < _g14.length) {
				var decl = _g14[_g7];
				++_g7;
				switch(decl._hx_index) {
				case 8:
					var _g22 = decl.init;
					var key1 = decl.name.lexeme;
					var value1 = _g22 != null ? this.evaluate(_g22) : null;
					if(__map_reserved[key1] != null) {
						fields.setReserved(key1,value1);
					} else {
						fields.h[key1] = value1;
					}
					break;
				case 12:
					var _g51 = decl.init;
					var key2 = decl.name.lexeme;
					var value2 = _g51 != null ? this.evaluate(_g51) : null;
					if(__map_reserved[key2] != null) {
						fields.setReserved(key2,value2);
					} else {
						fields.h[key2] = value2;
					}
					break;
				default:
				}
			}
			this.environment = previousEnv;
			this.environment.assign(_g13,new cosy.StructInstance(_g13,fields));
			break;
		case 12:
			var _g17 = statement.init;
			var value3 = cosy.Interpreter.uninitialized;
			if(_g17 != null) {
				value3 = this.evaluate(_g17);
			}
			this.environment.define(statement.name.lexeme,value3);
			break;
		}
	}
	resolve(expr,depth) {
		this.locals.set(expr,depth);
	}
	executeBlock(statements,environment) {
		var previous = this.environment;
		try {
			this.environment = environment;
			var _g = 0;
			while(_g < statements.length) this.execute(statements[_g++]);
			this.environment = previous;
		} catch( e ) {
			var e1 = ((e) instanceof js._Boot.HaxeError) ? e.val : e;
			this.environment = previous;
			throw js._Boot.HaxeError.wrap(e1);
		}
	}
	evaluate(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g4 = expr.exprs;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g4.length) _g.push(this.evaluate(_g4[_g1++]));
			return _g;
		case 1:
			var _g5 = expr.name;
			var value = this.evaluate(expr.value);
			var _g2 = this.locals.h[expr.__id__];
			if(_g2 == null) {
				this.globals.assign(_g5,value);
			} else {
				this.environment.assignAt(_g2,_g5,value);
			}
			return value;
		case 2:
			var _g18 = expr.op;
			var left = this.evaluate(expr.left);
			var right = this.evaluate(expr.right);
			switch(_g18.type._hx_index) {
			case 9:
				this.checkNumberOperands(_g18,left,right);
				return left - right;
			case 10:
				if(typeof(left) == "number" && typeof(right) == "number") {
					return left + right;
				} else if(typeof(left) == "number" && typeof(right) == "string") {
					return left + right;
				} else if(typeof(left) == "string" && typeof(right) == "number") {
					return left + right;
				} else if(typeof(left) == "string" && typeof(right) == "string") {
					return left + right;
				} else {
					throw new js._Boot.HaxeError(new cosy.RuntimeError(_g18,"Operands cannot be concatinated."));
				}
				break;
			case 11:
				this.checkNumberOperands(_g18,left,right);
				return left / right;
			case 12:
				this.checkNumberOperands(_g18,left,right);
				return left * right;
			case 15:
				return !this.isEqual(left,right);
			case 17:
				return this.isEqual(left,right);
			case 18:
				this.checkNumberOperands(_g18,left,right);
				return left > right;
			case 19:
				this.checkNumberOperands(_g18,left,right);
				return left >= right;
			case 20:
				this.checkNumberOperands(_g18,left,right);
				return left < right;
			case 21:
				this.checkNumberOperands(_g18,left,right);
				return left <= right;
			default:
				return null;
			}
			break;
		case 3:
			var _g14 = expr.$arguments;
			var _g13 = expr.paren;
			var callee = this.evaluate(expr.callee);
			var f = $bind(this,this.evaluate);
			var result = new Array(_g14.length);
			var _g3 = 0;
			var _g11 = _g14.length;
			while(_g3 < _g11) {
				var i = _g3++;
				result[i] = f(_g14[i]);
			}
			if(!js.Boot.__implements(callee,cosy.Callable)) {
				throw new js._Boot.HaxeError(new cosy.RuntimeError(_g13,"Can only call functions and classes"));
			} else {
				var func = callee;
				var arity = func.arity();
				if(result.length != arity) {
					throw new js._Boot.HaxeError(new cosy.RuntimeError(_g13,"Expected " + arity + " argument(s) but got " + result.length + "."));
				}
				return func.call(this,result);
			}
			break;
		case 4:
			var _g16 = expr.name;
			var obj = this.evaluate(expr.obj);
			if(((obj) instanceof Array)) {
				return this.arrayGet(obj,_g16);
			} else if(((obj) instanceof cosy.StructInstance)) {
				return obj.get(_g16);
			} else if(((obj) instanceof cosy.Instance)) {
				return obj.get(_g16);
			} else {
				throw new js._Boot.HaxeError(new cosy.RuntimeError(_g16,"Only instances have properties"));
			}
			break;
		case 5:
			return this.evaluate(expr.e);
		case 6:
			return expr.v;
		case 7:
			var _g30 = expr.right;
			var left1 = this.evaluate(expr.left);
			switch(expr.op.type._hx_index) {
			case 25:
				if(!this.isTruthy(left1)) {
					return left1;
				} else {
					return this.evaluate(_g30);
				}
				break;
			case 34:
				if(this.isTruthy(left1)) {
					return left1;
				} else {
					return this.evaluate(_g30);
				}
				break;
			default:
				return this.evaluate(_g30);
			}
			break;
		case 8:
			var _g21 = expr.name;
			var obj1 = this.evaluate(expr.obj);
			var value1 = this.evaluate(expr.value);
			if(((obj1) instanceof cosy.Instance)) {
				obj1.set(_g21,value1);
			} else if(((obj1) instanceof cosy.StructInstance)) {
				obj1.set(_g21,value1);
			} else {
				throw new js._Boot.HaxeError(new cosy.RuntimeError(_g21,"Only instances have fields"));
			}
			return value1;
		case 9:
			return this.lookUpVariable(expr.keyword,expr);
		case 10:
			var _g24 = expr.method;
			var distance = this.locals.h[expr.__id__];
			var superclass = this.environment.getAt(distance,"super");
			var obj2 = this.environment.getAt(distance - 1,"this");
			var method = superclass.findMethod(_g24.lexeme);
			if(method == null) {
				throw new js._Boot.HaxeError(new cosy.RuntimeError(_g24,"Undefined property \"" + _g24.lexeme + "\"."));
			}
			return method.bind(obj2);
		case 11:
			var _g10 = expr.decls;
			var _g9 = expr.name;
			var structObj = this.lookUpVariable(_g9,expr);
			if(!((structObj) instanceof cosy.StructInstance)) {
				throw new js._Boot.HaxeError(new cosy.RuntimeError(_g9,"Struct initializer on non-struct object."));
			}
			var _g6 = 0;
			while(_g6 < _g10.length) {
				var decl = _g10[_g6];
				++_g6;
				if(decl._hx_index == 1) {
					structObj.set(decl.name,this.evaluate(decl.value));
				}
			}
			return structObj;
		case 12:
			var _g12 = expr.op;
			var right1 = this.evaluate(expr.right);
			switch(_g12.type._hx_index) {
			case 9:
				this.checkNumberOperand(_g12,right1);
				return -right1;
			case 14:
				return !this.isTruthy(right1);
			default:
				return null;
			}
			break;
		case 13:
			return this.lookUpVariable(expr.name,expr);
		case 14:
			return new cosy.Function(null,expr.params,expr.body,this.environment,false);
		}
	}
	arrayGet(array,name) {
		switch(name.lexeme) {
		case "concat":
			return new cosy._Interpreter.ArrayCallable(1,function(args) {
				var _this = args[0];
				var f = $bind(array,$arrayPush);
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(_this[i]);
				}
				return result;
			});
		case "get":
			return new cosy._Interpreter.ArrayCallable(1,function(args1) {
				return array[args1[0]];
			});
		case "length":
			return array.length;
		case "pop":
			return new cosy._Interpreter.ArrayCallable(0,function(_) {
				if(array.length == 0) {
					throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Cannot pop from empty array."));
				} else {
					return array.pop();
				}
			});
		case "push":
			return new cosy._Interpreter.ArrayCallable(1,function(args2) {
				var f1 = $bind(array,$arrayPush);
				var result1 = new Array(args2.length);
				var _g2 = 0;
				var _g11 = args2.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					result1[i1] = f1(args2[i1]);
				}
				return result1;
			});
		default:
			throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Undefined method \"" + name.lexeme + "\"."));
		}
	}
	lookUpVariable(name,expr) {
		var _g = this.locals.h[expr.__id__];
		var value = _g == null ? this.globals.get(name) : this.environment.getAt(_g,name.lexeme);
		if(value == cosy.Interpreter.uninitialized) {
			throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Accessing uninitialized variable \"" + name.lexeme + "\"."));
		}
		return value;
	}
	isTruthy(v) {
		if(v == null) {
			return false;
		}
		if(typeof(v) == "boolean") {
			return v;
		}
		return true;
	}
	isEqual(a,b) {
		if(a == null && b == null) {
			return true;
		}
		if(a == null) {
			return false;
		}
		return a == b;
	}
	checkNumberOperand(op,operand) {
		if(typeof(operand) == "number") {
			return;
		}
		throw new js._Boot.HaxeError(new cosy.RuntimeError(op,"Operand must be a number"));
	}
	checkNumberOperands(op,left,right) {
		if(typeof(left) == "number" && typeof(right) == "number") {
			return;
		}
		throw new js._Boot.HaxeError(new cosy.RuntimeError(op,"Operand must be a number"));
	}
	stringify(v) {
		if(v == null) {
			return "nil";
		}
		return "" + Std.string(v);
	}
}
cosy.Interpreter.__name__ = true;
Object.assign(cosy.Interpreter.prototype, {
	__class__: cosy.Interpreter
});
cosy.Environment = class cosy_Environment {
	constructor(enclosing) {
		this.values = new haxe.ds.StringMap();
		this.enclosing = enclosing;
	}
	define(name,value) {
		var _this = this.values;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	get(name) {
		var key = name.lexeme;
		var _this = this.values;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.values;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		if(this.enclosing != null) {
			return this.enclosing.get(name);
		}
		throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Undefined variable \"" + name.lexeme + "\"."));
	}
	getAt(distance,name) {
		var _this = this.ancestor(distance).values;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	assign(name,value) {
		var key = name.lexeme;
		var _this = this.values;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.values;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		} else if(this.enclosing != null) {
			this.enclosing.assign(name,value);
		} else {
			throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Undefined variable \"" + name.lexeme + "\"."));
		}
	}
	assignAt(distance,name,value) {
		var key = name.lexeme;
		var _this = this.ancestor(distance).values;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		return;
	}
	ancestor(distance) {
		var env = this;
		var _g = 0;
		while(_g < distance) {
			++_g;
			env = env.enclosing;
		}
		return env;
	}
}
cosy.Environment.__name__ = true;
Object.assign(cosy.Environment.prototype, {
	__class__: cosy.Environment
});
cosy._Interpreter = {};
cosy._Interpreter.ClockCallable = class cosy__$Interpreter_ClockCallable {
	constructor() {
	}
	arity() {
		return 0;
	}
	call(interpreter,args) {
		return Date.now() / 1000 * 1000;
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.ClockCallable.__name__ = true;
cosy._Interpreter.ClockCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.ClockCallable.prototype, {
	__class__: cosy._Interpreter.ClockCallable
});
cosy._Interpreter.RandomCallable = class cosy__$Interpreter_RandomCallable {
	constructor() {
	}
	arity() {
		return 0;
	}
	call(interpreter,args) {
		return Math.random();
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.RandomCallable.__name__ = true;
cosy._Interpreter.RandomCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.RandomCallable.prototype, {
	__class__: cosy._Interpreter.RandomCallable
});
cosy._Interpreter.StringLengthCallable = class cosy__$Interpreter_StringLengthCallable {
	constructor() {
	}
	arity() {
		return 1;
	}
	call(interpreter,args) {
		return args[0].length;
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.StringLengthCallable.__name__ = true;
cosy._Interpreter.StringLengthCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.StringLengthCallable.prototype, {
	__class__: cosy._Interpreter.StringLengthCallable
});
cosy._Interpreter.StringCharAtCallable = class cosy__$Interpreter_StringCharAtCallable {
	constructor() {
	}
	arity() {
		return 2;
	}
	call(interpreter,args) {
		return args[0].charAt(args[1]);
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.StringCharAtCallable.__name__ = true;
cosy._Interpreter.StringCharAtCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.StringCharAtCallable.prototype, {
	__class__: cosy._Interpreter.StringCharAtCallable
});
cosy._Interpreter.InputCallable = class cosy__$Interpreter_InputCallable {
	constructor() {
	}
	arity() {
		return 0;
	}
	call(interpreter,args) {
		throw new js._Boot.HaxeError("Not implemented on this platform!");
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.InputCallable.__name__ = true;
cosy._Interpreter.InputCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.InputCallable.prototype, {
	__class__: cosy._Interpreter.InputCallable
});
cosy.Cosy = class cosy_Cosy {
	static main() {
	}
	static println(v) {
		if(cosy.Cosy.testing) {
			cosy.Cosy.testOutput += Std.string(v) + "\n";
		} else {
			window.console.log(v);
		}
	}
	static validate(source) {
		cosy.Cosy.hadError = false;
		var statements = new cosy.Parser(new cosy.Scanner(source).scanTokens()).parse();
		if(cosy.Cosy.hadError) {
			return;
		}
		var resolver = new cosy.Resolver(cosy.Cosy.interpreter);
		resolver.beginScope();
		resolver.resolveStmts(statements);
		resolver.endScope();
		new cosy.Typer().typeStmts(statements);
		if(cosy.Cosy.hadError) {
			return;
		}
	}
	static run(source) {
		cosy.Cosy.hadError = false;
		var statements = new cosy.Parser(new cosy.Scanner(source).scanTokens()).parse();
		if(cosy.Cosy.hadError) {
			return;
		}
		var resolver = new cosy.Resolver(cosy.Cosy.interpreter);
		resolver.beginScope();
		resolver.resolveStmts(statements);
		resolver.endScope();
		new cosy.Typer().typeStmts(statements);
		if(cosy.Cosy.hadError) {
			return;
		}
		statements = new cosy.Optimizer().optimizeStmts(statements);
		if(cosy.Cosy.prettyPrint) {
			var printer = new cosy.AstPrinter();
			var _g = 0;
			while(_g < statements.length) cosy.Cosy.println(printer.printStmt(statements[_g++]));
			return;
		}
		if(cosy.Cosy.javascript) {
			cosy.Cosy.println("// standard library\nlet clock = Date.now;\n");
			var printer1 = new cosy.JavaScriptPrinter();
			var _g1 = 0;
			while(_g1 < statements.length) cosy.Cosy.println(printer1.printStmt(statements[_g1++]));
			return;
		}
		cosy.Cosy.interpreter.interpret(statements);
	}
	static reportWarning(line,where,message) {
		cosy.Cosy.println("[line " + line + "] Warning " + where + ": " + message);
	}
	static warning(data,message) {
		switch(data._hx_index) {
		case 0:
			cosy.Cosy.reportWarning(data.v,"",message);
			break;
		case 1:
			var _g = data.v;
			if(_g.type == cosy.TokenType.Eof) {
				cosy.Cosy.reportWarning(_g.line,"at end",message);
			} else {
				cosy.Cosy.reportWarning(_g.line,"at \"" + _g.lexeme + "\"",message);
			}
			break;
		}
	}
	static report(line,where,message) {
		cosy.Cosy.println("[line " + line + "] Error " + where + ": " + message);
		cosy.Cosy.hadError = true;
	}
	static error(data,message) {
		switch(data._hx_index) {
		case 0:
			cosy.Cosy.report(data.v,"",message);
			break;
		case 1:
			var _g = data.v;
			if(_g.type == cosy.TokenType.Eof) {
				cosy.Cosy.report(_g.line,"at end",message);
			} else {
				cosy.Cosy.report(_g.line,"at \"" + _g.lexeme + "\"",message);
			}
			break;
		}
	}
	static runtimeError(e) {
		cosy.Cosy.println("[line " + e.token.line + "] Runtime Error: " + e.message);
		cosy.Cosy.hadRuntimeError = true;
	}
}
$hx_exports["cosy"]["Cosy"]["run"] = cosy.Cosy.run;
$hx_exports["cosy"]["Cosy"]["validate"] = cosy.Cosy.validate;
cosy.Cosy.__name__ = true;
cosy.ErrorDataType = $hxEnums["cosy.ErrorDataType"] = { __ename__ : true, __constructs__ : ["Line","Token"]
	,Line: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"cosy.ErrorDataType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Token: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"cosy.ErrorDataType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
cosy.Error = class cosy_Error {
	constructor(message) {
		this.message = message;
	}
}
cosy.Error.__name__ = true;
Object.assign(cosy.Error.prototype, {
	__class__: cosy.Error
});
cosy.Expr = $hxEnums["cosy.Expr"] = { __ename__ : true, __constructs__ : ["ArrayLiteral","Assign","Binary","Call","Get","Grouping","Literal","Logical","Set","This","Super","StructInit","Unary","Variable","AnonFunction"]
	,ArrayLiteral: ($_=function(keyword,exprs) { return {_hx_index:0,keyword:keyword,exprs:exprs,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword","exprs"],$_)
	,Assign: ($_=function(name,value) { return {_hx_index:1,name:name,value:value,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["name","value"],$_)
	,Binary: ($_=function(left,op,right) { return {_hx_index:2,left:left,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["left","op","right"],$_)
	,Call: ($_=function(callee,paren,$arguments) { return {_hx_index:3,callee:callee,paren:paren,$arguments:$arguments,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["callee","paren","$arguments"],$_)
	,Get: ($_=function(obj,name) { return {_hx_index:4,obj:obj,name:name,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["obj","name"],$_)
	,Grouping: ($_=function(e) { return {_hx_index:5,e:e,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Literal: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Logical: ($_=function(left,op,right) { return {_hx_index:7,left:left,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["left","op","right"],$_)
	,Set: ($_=function(obj,name,value) { return {_hx_index:8,obj:obj,name:name,value:value,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["obj","name","value"],$_)
	,This: ($_=function(keyword) { return {_hx_index:9,keyword:keyword,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword"],$_)
	,Super: ($_=function(keyword,method) { return {_hx_index:10,keyword:keyword,method:method,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword","method"],$_)
	,StructInit: ($_=function(name,decls) { return {_hx_index:11,name:name,decls:decls,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["name","decls"],$_)
	,Unary: ($_=function(op,right) { return {_hx_index:12,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["op","right"],$_)
	,Variable: ($_=function(name) { return {_hx_index:13,name:name,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["name"],$_)
	,AnonFunction: ($_=function(params,body,returnType) { return {_hx_index:14,params:params,body:body,returnType:returnType,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["params","body","returnType"],$_)
};
cosy.Function = class cosy_Function {
	constructor(name,params,body,closure,isInitializer) {
		this.name = name;
		this.params = params;
		this.body = body;
		this.closure = closure;
		this.isInitializer = isInitializer;
	}
	arity() {
		return this.params.length;
	}
	call(interpreter,args) {
		var environment = new cosy.Environment(this.closure);
		var _g = 0;
		var _g1 = this.params.length;
		while(_g < _g1) {
			var i = _g++;
			environment.define(this.params[i].name.lexeme,args[i]);
		}
		try {
			interpreter.executeBlock(this.body,environment);
		} catch( ret ) {
			var ret1 = ((ret) instanceof js._Boot.HaxeError) ? ret.val : ret;
			if(((ret1) instanceof cosy.Return)) {
				if(!this.isInitializer) {
					return ret1.value;
				}
			} else {
				throw ret;
			}
		}
		if(this.isInitializer) {
			return this.closure.getAt(0,"this");
		} else {
			return null;
		}
	}
	bind(instance) {
		var env = new cosy.Environment(this.closure);
		env.define("this",instance);
		return new cosy.Function(this.name,this.params,this.body,env,this.isInitializer);
	}
	toString() {
		if(this.name != null) {
			return "<fn " + this.name.lexeme + ">";
		} else {
			return "<fn>";
		}
	}
}
cosy.Function.__name__ = true;
cosy.Function.__interfaces__ = [cosy.Callable];
Object.assign(cosy.Function.prototype, {
	__class__: cosy.Function
});
cosy.Instance = class cosy_Instance {
	constructor(klass) {
		this.fields = new haxe.ds.StringMap();
		this.klass = klass;
	}
	get(name) {
		var key = name.lexeme;
		var _this = this.fields;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.fields;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		var method = this.klass.findMethod(name.lexeme);
		if(method != null) {
			return method.bind(this);
		}
		throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Undefined property \"" + name.lexeme + "\"."));
	}
	set(name,value) {
		var key = name.lexeme;
		var _this = this.fields;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
}
cosy.Instance.__name__ = true;
Object.assign(cosy.Instance.prototype, {
	__class__: cosy.Instance
});
cosy._Interpreter.ArrayCallable = class cosy__$Interpreter_ArrayCallable {
	constructor(arityValue,method) {
		this.arityValue = arityValue;
		this.method = method;
	}
	arity() {
		return this.arityValue;
	}
	call(interpreter,args) {
		return this.method(args);
	}
	toString() {
		return "<native fn>";
	}
}
cosy._Interpreter.ArrayCallable.__name__ = true;
cosy._Interpreter.ArrayCallable.__interfaces__ = [cosy.Callable];
Object.assign(cosy._Interpreter.ArrayCallable.prototype, {
	__class__: cosy._Interpreter.ArrayCallable
});
cosy.JavaScriptPrinter = class cosy_JavaScriptPrinter {
	constructor() {
		this.classNames = [];
		this.isInClass = false;
		this.indentAmount = 0;
	}
	indent() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.indentAmount;
		while(_g1 < _g2) {
			++_g1;
			_g.push("  ");
		}
		return _g.join("");
	}
	printBlock(statements) {
		this.indentAmount++;
		var _g = [];
		var _g1 = 0;
		while(_g1 < statements.length) {
			var stmt = statements[_g1++];
			_g.push(this.indent() + this.printStmt(stmt));
		}
		var s = _g.join("\n");
		this.indentAmount--;
		return "{\n" + s + "\n" + this.indent() + "}";
	}
	printStmt(statement) {
		switch(statement._hx_index) {
		case 0:
			return this.printBlock(statement.statements);
		case 1:
			var _g19 = statement.superclass;
			var className = statement.name.lexeme;
			this.classNames.push(className);
			var declaration = _g19 != null ? " extends " + this.printExpr(_g19) : "";
			this.isInClass = true;
			var body = this.printBlock(statement.methods);
			this.isInClass = false;
			return "" + ("class " + className + declaration) + " " + body;
		case 2:
			return "" + this.printExpr(statement.e) + ";";
		case 3:
			var _g6 = statement.name;
			var counter = _g6 != null ? _g6.lexeme : "__i";
			return "for (var " + counter + " = " + this.printExpr(statement.from) + "; " + counter + " < " + this.printExpr(statement.to) + "; " + counter + "++) " + this.printBlock(statement.body);
		case 4:
			return "for (" + statement.name.lexeme + " of " + this.printExpr(statement.array) + ") " + this.printBlock(statement.body);
		case 5:
			var _g = statement.cond;
			return "while (" + (_g != null ? this.printExpr(_g) : "true") + ") " + this.printBlock(statement.body);
		case 6:
			var _g23 = statement.body;
			var _g22 = statement.params;
			var declaration1 = "" + (this.isInClass ? "" : "function ") + statement.name.lexeme;
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < _g22.length) _g1.push(_g22[_g11++].name.lexeme);
			return "" + declaration1 + "(" + _g1.join(",") + ") " + this.printStmt(cosy.Stmt.Block(_g23));
		case 7:
			var _g4 = statement.el;
			return "if (" + this.printExpr(statement.cond) + ") " + this.printStmt(statement.then) + (_g4 != null ? " else " + this.printStmt(_g4) : "");
		case 8:
			var _g12 = statement.init;
			return "var " + statement.name.lexeme + (_g12 != null ? " = " + this.printExpr(_g12) : "") + ";";
		case 9:
			return "console.log(" + this.printExpr(statement.e) + ");";
		case 10:
			var _g29 = statement.value;
			return "return" + (_g29 != null ? " " + this.printExpr(_g29) : "") + ";";
		case 11:
			return "// " + statement.name.lexeme + " struct";
		case 12:
			var _g17 = statement.init;
			return "const " + statement.name.lexeme + (_g17 != null ? " = " + this.printExpr(_g17) : "") + ";";
		}
	}
	printExpr(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g4 = expr.exprs;
			var f = $bind(this,this.printExpr);
			var result = new Array(_g4.length);
			var _g = 0;
			var _g1 = _g4.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = f(_g4[i]);
			}
			return "[" + result.join(", ") + "]";
		case 1:
			return "" + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 2:
			var _g18 = expr.op;
			return "" + this.printExpr(expr.left) + " " + (_g18.type._hx_index == 17 ? "===" : _g18.lexeme) + " " + this.printExpr(expr.right);
		case 3:
			var _g14 = expr.$arguments;
			var calleeName = this.printExpr(expr.callee);
			var tmp = this.classNames.indexOf(calleeName) != -1 ? "new " : "";
			var tmp1 = "" + calleeName + "(";
			var f1 = $bind(this,this.printExpr);
			var result1 = new Array(_g14.length);
			var _g2 = 0;
			var _g11 = _g14.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				result1[i1] = f1(_g14[i1]);
			}
			return tmp + (tmp1 + result1.join(",") + ")");
		case 4:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme;
		case 5:
			return "(" + this.printExpr(expr.e) + ")";
		case 6:
			var _g7 = expr.v;
			if(_g7 == null) {
				return "null";
			} else if(typeof(_g7) == "string") {
				return "\"" + Std.string(_g7) + "\"";
			} else {
				return "" + Std.string(_g7);
			}
			break;
		case 7:
			return "" + this.printExpr(expr.left) + " " + (expr.op.type._hx_index == 34 ? "||" : "&&") + " " + this.printExpr(expr.right);
		case 8:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 9:
			return "this";
		case 10:
			return "super." + expr.method.lexeme;
		case 11:
			var _g9 = expr.decls;
			var _g3 = [];
			var _g12 = 0;
			while(_g12 < _g9.length) _g3.push(StringTools.replace(this.printExpr(_g9[_g12++])," = ",": "));
			return "{ " + _g3.join(", ") + " }";
		case 12:
			return "" + expr.op.lexeme + this.printExpr(expr.right);
		case 13:
			return expr.name.lexeme;
		case 14:
			var _g26 = expr.body;
			var _g25 = expr.params;
			var _g5 = [];
			var _g13 = 0;
			while(_g13 < _g25.length) _g5.push(_g25[_g13++].name.lexeme);
			return "function (" + _g5.join(", ") + ") " + this.printStmt(cosy.Stmt.Block(_g26));
		}
	}
}
cosy.JavaScriptPrinter.__name__ = true;
Object.assign(cosy.JavaScriptPrinter.prototype, {
	__class__: cosy.JavaScriptPrinter
});
cosy.Klass = class cosy_Klass {
	constructor(name,superclass,methods) {
		this.name = name;
		this.superclass = superclass;
		this.methods = methods;
	}
	arity() {
		var _g = this.findMethod("init");
		if(_g == null) {
			return 0;
		} else {
			return _g.arity();
		}
	}
	call(interpreter,args) {
		var instance = new cosy.Instance(this);
		var _g = this.findMethod("init");
		if(_g != null) {
			_g.bind(instance).call(interpreter,args);
		}
		return instance;
	}
	findMethod(name) {
		var _this = this.methods;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.methods;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		if(this.superclass != null) {
			return this.superclass.findMethod(name);
		}
		return null;
	}
	toString() {
		return this.name;
	}
}
cosy.Klass.__name__ = true;
cosy.Klass.__interfaces__ = [cosy.Callable];
Object.assign(cosy.Klass.prototype, {
	__class__: cosy.Klass
});
cosy.Optimizer = class cosy_Optimizer {
	constructor() {
	}
	optimizeStmts(stmts) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < stmts.length) _g.push(this.optimizeStmt(stmts[_g1++]));
		return _g;
	}
	optimizeStmt(stmt) {
		switch(stmt._hx_index) {
		case 0:
			return cosy.Stmt.Block(this.optimizeStmts(stmt.statements));
		case 2:
			return cosy.Stmt.Expression(this.optimizeExpr(stmt.e));
		case 7:
			var _g2 = stmt.el;
			return cosy.Stmt.If(this.optimizeExpr(stmt.cond),this.optimizeStmt(stmt.then),_g2 != null ? this.optimizeStmt(_g2) : null);
		case 8:
			var _g5 = stmt.init;
			return cosy.Stmt.Mut(stmt.name,stmt.type,_g5 != null ? this.optimizeExpr(_g5) : _g5);
		case 9:
			return cosy.Stmt.Print(this.optimizeExpr(stmt.e));
		case 10:
			var _g13 = stmt.value;
			return cosy.Stmt.Return(stmt.keyword,_g13 != null ? this.optimizeExpr(_g13) : null);
		case 12:
			var _g8 = stmt.init;
			return cosy.Stmt.Var(stmt.name,stmt.type,_g8 != null ? this.optimizeExpr(_g8) : _g8);
		default:
			return stmt;
		}
	}
	optimizeExpr(expr) {
		if(expr._hx_index == 2) {
			var _g1 = expr.op;
			var l = this.optimizeExpr(expr.left);
			var r = this.optimizeExpr(expr.right);
			if(l._hx_index == 6) {
				var _g = l.v;
				if(r._hx_index == 6) {
					var _g11 = r.v;
					if(typeof(_g) == "number" && typeof(_g11) == "number") {
						var tmp;
						switch(_g1.type._hx_index) {
						case 9:
							tmp = _g - _g11;
							break;
						case 10:
							tmp = _g + _g11;
							break;
						case 11:
							tmp = _g / _g11;
							break;
						case 12:
							tmp = _g * _g11;
							break;
						default:
							cosy.Cosy.error(cosy.ErrorDataType.Token(_g1),"Invalid operator.");
							return cosy.Expr.Binary(l,_g1,r);
						}
						return cosy.Expr.Literal(tmp);
					} else if(typeof(_g) == "string" && typeof(_g11) == "string") {
						return cosy.Expr.Literal(_g + _g11);
					} else {
						return cosy.Expr.Binary(l,_g1,r);
					}
				} else {
					return cosy.Expr.Binary(l,_g1,r);
				}
			} else {
				return cosy.Expr.Binary(l,_g1,r);
			}
		} else {
			return expr;
		}
	}
}
cosy.Optimizer.__name__ = true;
Object.assign(cosy.Optimizer.prototype, {
	__class__: cosy.Optimizer
});
cosy.Parser = class cosy_Parser {
	constructor(tokens) {
		this.current = 0;
		this.structNames = [];
		this.tokens = tokens;
	}
	parse() {
		var statements = [];
		while(!this.isAtEnd()) statements.push(this.declaration());
		return statements;
	}
	expression() {
		return this.assignment();
	}
	declaration() {
		try {
			if(this.match([cosy.TokenType.Class])) {
				return this.classDeclaration();
			}
			if(this.match([cosy.TokenType.Struct])) {
				return this.structDeclaration();
			}
			if(this.match([cosy.TokenType.Fn])) {
				return this.func("function");
			}
			if(this.match([cosy.TokenType.Var])) {
				return this.varDeclaration();
			}
			if(this.match([cosy.TokenType.Mut])) {
				return this.mutDeclaration();
			}
			return this.statement();
		} catch( e ) {
			if(((((e) instanceof js._Boot.HaxeError) ? e.val : e) instanceof cosy._Parser.ParseError)) {
				this.synchronize();
				return null;
			} else {
				throw e;
			}
		}
	}
	statement() {
		if(this.match([cosy.TokenType.For])) {
			return this.forStatement();
		}
		if(this.match([cosy.TokenType.If])) {
			return this.ifStatement();
		}
		if(this.match([cosy.TokenType.Print])) {
			return this.printStatement();
		}
		if(this.match([cosy.TokenType.Return])) {
			return this.returnStatement();
		}
		if(this.match([cosy.TokenType.LeftBrace])) {
			return cosy.Stmt.Block(this.block());
		}
		return this.expressionStatement();
	}
	forStatement() {
		if(this.checkUntil(cosy.TokenType.DotDot,cosy.TokenType.LeftBrace)) {
			var keyword = this.previous();
			var name = null;
			if(this.check(cosy.TokenType.Identifier)) {
				name = this.consume(cosy.TokenType.Identifier,"Expect variable name.");
				if(StringTools.startsWith(name.lexeme,"_")) {
					this.error(name,"Loop counters cannot be marked as unused. Use `for min...max` syntax instead.");
				}
				this.consume(cosy.TokenType.In,"Expect \"in\" after for loop identifier.");
			}
			var from = this.expression();
			this.consume(cosy.TokenType.DotDot,"Expect \"..\" between from and to numbers.");
			var to = this.expression();
			this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy.Stmt.For(keyword,name,from,to,this.block());
		} else if(this.checkUntil(cosy.TokenType.In,cosy.TokenType.LeftBrace)) {
			var name1 = this.consume(cosy.TokenType.Identifier,"Expect variable name.");
			this.consume(cosy.TokenType.In,"Expect \"in\" after for loop identifier.");
			var array = this.expression();
			this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy.Stmt.ForArray(name1,array,this.block());
		} else {
			var condition = this.check(cosy.TokenType.LeftBrace) ? null : this.expression();
			this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy.Stmt.ForCondition(condition,this.block());
		}
	}
	ifStatement() {
		return cosy.Stmt.If(this.expression(),this.statement(),this.match([cosy.TokenType.Else]) ? this.statement() : null);
	}
	printStatement() {
		return cosy.Stmt.Print(this.expression());
	}
	returnStatement() {
		return cosy.Stmt.Return(this.previous(),this.match([cosy.TokenType.Underscore]) ? null : this.expression());
	}
	expressionStatement() {
		return cosy.Stmt.Expression(this.expression());
	}
	block() {
		var statements = [];
		while(!this.check(cosy.TokenType.RightBrace) && !this.isAtEnd()) statements.push(this.declaration());
		this.consume(cosy.TokenType.RightBrace,"Expect \"}\" after block.");
		return statements;
	}
	varDeclaration() {
		var name = this.consume(cosy.TokenType.Identifier,"Expect variable name.");
		var type = this.paramType();
		var initializer = null;
		if(this.match([cosy.TokenType.Equal])) {
			initializer = this.expression();
		}
		return cosy.Stmt.Var(name,type,initializer);
	}
	mutDeclaration() {
		var name = this.consume(cosy.TokenType.Identifier,"Expect variable name.");
		var type = this.paramType();
		var initializer = null;
		if(this.match([cosy.TokenType.Equal])) {
			initializer = this.expression();
		}
		return cosy.Stmt.Mut(name,type,initializer);
	}
	classDeclaration() {
		var name = this.consume(cosy.TokenType.Identifier,"Expect class name");
		var superclass;
		if(this.match([cosy.TokenType.Less])) {
			this.consume(cosy.TokenType.Identifier,"Expect superclass name");
			superclass = cosy.Expr.Variable(this.previous());
		} else {
			superclass = null;
		}
		this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before class body.");
		var methods = [];
		while(!this.check(cosy.TokenType.RightBrace) && !this.isAtEnd()) methods.push(this.func("method"));
		this.consume(cosy.TokenType.RightBrace,"Expect \"}\" after class body.");
		return cosy.Stmt.Class(name,superclass,methods);
	}
	structDeclaration() {
		var name = this.consume(cosy.TokenType.Identifier,"Expect class name");
		this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before struct body.");
		var declarations = [];
		while(!this.check(cosy.TokenType.RightBrace) && !this.isAtEnd()) if(this.match([cosy.TokenType.Var])) {
			declarations.push(this.varDeclaration());
		} else if(this.match([cosy.TokenType.Mut])) {
			declarations.push(this.mutDeclaration());
		} else {
			cosy.Cosy.error(cosy.ErrorDataType.Token(this.tokens[this.current]),"Structs can only contain variable definitions.");
			break;
		}
		this.structNames.push(name.lexeme);
		this.consume(cosy.TokenType.RightBrace,"Expect \"}\" after struct body.");
		return cosy.Stmt.Struct(name,declarations);
	}
	func(kind) {
		var name = this.consume(cosy.TokenType.Identifier,"Expect " + kind + " name.");
		var functionExpr = this.funcBody(kind);
		if(functionExpr._hx_index == 14) {
			return cosy.Stmt.Function(name,functionExpr.params,functionExpr.body,functionExpr.returnType);
		} else {
			throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Invalid function declaration."));
		}
	}
	paramType() {
		if(this.match([cosy.TokenType.BooleanType])) {
			return cosy.VariableType.Boolean;
		} else if(this.match([cosy.TokenType.NumberType])) {
			return cosy.VariableType.Number;
		} else if(this.match([cosy.TokenType.StringType])) {
			return cosy.VariableType.Text;
		} else if(this.match([cosy.TokenType.FunctionType])) {
			this.consume(cosy.TokenType.LeftParen,"Expect \"(\" after Fun.");
			var funcParamTypes = [];
			while(!this.check(cosy.TokenType.RightParen)) {
				funcParamTypes.push(this.paramType());
				if(!this.match([cosy.TokenType.Comma])) {
					break;
				}
			}
			this.consume(cosy.TokenType.RightParen,"Expect \")\" after parameters.");
			var returnType = this.paramType();
			if(returnType._hx_index == 0) {
				returnType = cosy.VariableType.Void;
			}
			return cosy.VariableType.Function(funcParamTypes,returnType);
		} else if(this.match([cosy.TokenType.ArrayType])) {
			return cosy.VariableType.Array(this.paramType());
		} else if(this.match([cosy.TokenType.Identifier])) {
			var identifier = this.previous();
			if(this.structNames.indexOf(identifier.lexeme) == -1) {
				return cosy.VariableType.Unknown;
			}
			return cosy.VariableType.NamedStruct(identifier.lexeme);
		} else {
			return cosy.VariableType.Unknown;
		}
	}
	funcBody(kind) {
		this.consume(cosy.TokenType.LeftParen,"Expect \"(\" after " + kind + " name.");
		var params = [];
		if(!this.check(cosy.TokenType.RightParen)) {
			while(true) {
				if(params.length >= 255) {
					this.error(this.peek(),"Cannot have more than 255 parameters.");
				}
				params.push({ name : this.consume(cosy.TokenType.Identifier,"Expect parameter name."), type : this.paramType()});
				if(!this.match([cosy.TokenType.Comma])) {
					break;
				}
			}
		}
		this.consume(cosy.TokenType.RightParen,"Expect \")\" after parameters.");
		var returnType = this.paramType();
		this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" before " + kind + " body");
		return cosy.Expr.AnonFunction(params,this.block(),returnType);
	}
	assignment() {
		var expr = this.or();
		if(this.match([cosy.TokenType.Equal])) {
			var equals = this.previous();
			var value = this.assignment();
			switch(expr._hx_index) {
			case 4:
				return cosy.Expr.Set(expr.obj,expr.name,value);
			case 13:
				return cosy.Expr.Assign(expr.name,value);
			default:
			}
			this.error(equals,"Invalid assignment target.");
		}
		return expr;
	}
	or() {
		var expr = this.and();
		while(this.match([cosy.TokenType.Or])) expr = cosy.Expr.Logical(expr,this.previous(),this.and());
		return expr;
	}
	and() {
		var expr = this.equality();
		while(this.match([cosy.TokenType.And])) expr = cosy.Expr.Logical(expr,this.previous(),this.equality());
		return expr;
	}
	equality() {
		var expr = this.comparison();
		while(this.match([cosy.TokenType.BangEqual,cosy.TokenType.EqualEqual])) expr = cosy.Expr.Binary(expr,this.previous(),this.comparison());
		return expr;
	}
	comparison() {
		var expr = this.addition();
		while(this.match([cosy.TokenType.Greater,cosy.TokenType.GreaterEqual,cosy.TokenType.Less,cosy.TokenType.LessEqual])) expr = cosy.Expr.Binary(expr,this.previous(),this.addition());
		return expr;
	}
	addition() {
		var expr = this.multiplication();
		while(this.match([cosy.TokenType.Minus,cosy.TokenType.Plus])) expr = cosy.Expr.Binary(expr,this.previous(),this.multiplication());
		return expr;
	}
	multiplication() {
		var expr = this.unary();
		while(this.match([cosy.TokenType.Star,cosy.TokenType.Slash])) expr = cosy.Expr.Binary(expr,this.previous(),this.multiplication());
		return expr;
	}
	unary() {
		if(this.match([cosy.TokenType.Bang,cosy.TokenType.Minus])) {
			return cosy.Expr.Unary(this.previous(),this.unary());
		} else {
			return this.call();
		}
	}
	call() {
		var expr = this.primary();
		while(true) if(this.match([cosy.TokenType.LeftParen])) {
			expr = this.finishCall(expr);
		} else if(this.match([cosy.TokenType.Dot])) {
			expr = cosy.Expr.Get(expr,this.consume(cosy.TokenType.Identifier,"Expect property name after \".\"."));
		} else {
			break;
		}
		return expr;
	}
	finishCall(callee) {
		var args = [];
		if(!this.check(cosy.TokenType.RightParen)) {
			while(true) {
				if(args.length >= 255) {
					this.error(this.peek(),"Cannot have more than 255 arguments");
				}
				args.push(this.expression());
				if(!this.match([cosy.TokenType.Comma])) {
					break;
				}
			}
		}
		return cosy.Expr.Call(callee,this.consume(cosy.TokenType.RightParen,"Expect \")\" after arguments."),args);
	}
	primary() {
		if(this.match([cosy.TokenType.False])) {
			return cosy.Expr.Literal(false);
		}
		if(this.match([cosy.TokenType.True])) {
			return cosy.Expr.Literal(true);
		}
		if(this.match([cosy.TokenType.Number,cosy.TokenType.String])) {
			return cosy.Expr.Literal(this.previous().literal);
		}
		if(this.match([cosy.TokenType.Super])) {
			var keyword = this.previous();
			this.consume(cosy.TokenType.Dot,"Expect \".\" after \"super\".");
			return cosy.Expr.Super(keyword,this.consume(cosy.TokenType.Identifier,"Expect superclass method name."));
		}
		if(this.match([cosy.TokenType.This])) {
			return cosy.Expr.This(this.previous());
		}
		if(this.match([cosy.TokenType.Fn])) {
			return this.funcBody("function");
		}
		if(this.match([cosy.TokenType.Identifier])) {
			return this.identifier();
		}
		if(this.match([cosy.TokenType.LeftParen])) {
			var expr = this.expression();
			this.consume(cosy.TokenType.RightParen,"Expect \")\" after expression.");
			return cosy.Expr.Grouping(expr);
		}
		if(this.match([cosy.TokenType.LeftBracket])) {
			return this.arrayLiteral();
		}
		throw new js._Boot.HaxeError(this.error(this.peek(),"Expect expression."));
	}
	arrayLiteral() {
		var keyword = this.previous();
		var exprs = [];
		while(!this.check(cosy.TokenType.RightBracket) && !this.isAtEnd()) {
			exprs.push(this.expression());
			if(!this.check(cosy.TokenType.RightBracket)) {
				this.consume(cosy.TokenType.Comma,"Expect \",\" between array values.");
			}
		}
		this.consume(cosy.TokenType.RightBracket,"Expect \"]\" after array literal.");
		return cosy.Expr.ArrayLiteral(keyword,exprs);
	}
	identifier() {
		var variable = this.previous();
		if(this.check(cosy.TokenType.LeftBrace) && this.structNames.indexOf(variable.lexeme) != -1) {
			this.consume(cosy.TokenType.LeftBrace,"Expect \"{\" after struct name.");
			var decls = [];
			while(!this.match([cosy.TokenType.RightBrace]) && !this.isAtEnd()) {
				decls.push(this.assignment());
				if(!this.check(cosy.TokenType.RightBrace)) {
					this.consume(cosy.TokenType.Comma,"Expect \",\" between variable initializers.");
				}
			}
			return cosy.Expr.StructInit(variable,decls);
		} else {
			return cosy.Expr.Variable(variable);
		}
	}
	consume(type,message) {
		if(this.check(type)) {
			return this.advance();
		}
		throw new js._Boot.HaxeError(this.error(this.peek(),message));
	}
	match(types) {
		var _g = 0;
		while(_g < types.length) if(this.check(types[_g++])) {
			this.advance();
			return true;
		}
		return false;
	}
	check(type) {
		if(this.isAtEnd()) {
			return false;
		}
		return this.peek().type == type;
	}
	checkUntil(type,until) {
		var cur = this.current;
		while(true) {
			if(this.tokens[cur].type == type) {
				return true;
			}
			++cur;
			if(!(this.tokens[cur].type != until && this.tokens[cur].type != cosy.TokenType.Eof)) {
				break;
			}
		}
		return false;
	}
	advance() {
		if(!this.isAtEnd()) {
			this.current++;
		}
		return this.previous();
	}
	isAtEnd() {
		return this.peek().type == cosy.TokenType.Eof;
	}
	peek() {
		return this.tokens[this.current];
	}
	previous() {
		return this.tokens[this.current - 1];
	}
	error(token,message) {
		cosy.Cosy.error(cosy.ErrorDataType.Token(token),message);
		return new cosy._Parser.ParseError();
	}
	synchronize() {
		this.advance();
		while(!this.isAtEnd()) switch(this.peek().type._hx_index) {
		case 26:case 29:case 30:case 32:case 35:case 36:case 41:
			return;
		default:
			this.advance();
		}
	}
}
cosy.Parser.__name__ = true;
Object.assign(cosy.Parser.prototype, {
	__class__: cosy.Parser
});
cosy._Parser = {};
cosy._Parser.ParseError = class cosy__$Parser_ParseError extends cosy.Error {
	constructor(message) {
		super(message);
	}
}
cosy._Parser.ParseError.__name__ = true;
cosy._Parser.ParseError.__super__ = cosy.Error;
Object.assign(cosy._Parser.ParseError.prototype, {
	__class__: cosy._Parser.ParseError
});
cosy.Resolver = class cosy_Resolver {
	constructor(interpreter) {
		this.currentClass = cosy._Resolver.ClassType.None;
		this.currentStruct = cosy._Resolver.StructType.None;
		this.currentFunction = cosy._Resolver.FunctionType.None;
		this.scopes = [];
		this.interpreter = interpreter;
	}
	resolveStmts(stmts) {
		var returnToken = null;
		var _g = 0;
		while(_g < stmts.length) {
			var stmt = stmts[_g];
			++_g;
			if(stmt._hx_index == 10) {
				returnToken = stmt.keyword;
			} else if(returnToken != null) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(returnToken),"Unreachable code after return statement.");
				returnToken = null;
			}
			this.resolveStmt(stmt);
		}
	}
	resolveStmt(stmt) {
		switch(stmt._hx_index) {
		case 0:
			this.beginScope();
			this.resolveStmts(stmt.statements);
			this.endScope();
			break;
		case 1:
			var _g20 = stmt.methods;
			var _g19 = stmt.superclass;
			var _g18 = stmt.name;
			var enclosingClass = this.currentClass;
			this.currentClass = cosy._Resolver.ClassType.Class;
			this.declare(_g18);
			this.define(_g18);
			if(_g19 != null) {
				if(_g19._hx_index == 13) {
					var _g = _g19.name;
					if(_g18.lexeme == _g.lexeme) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g),"A class cannot inherit from itself");
					}
				}
				this.currentClass = cosy._Resolver.ClassType.Subclass;
				this.resolveExpr(_g19);
				this.beginScope();
				var this1 = this.scopes;
				var value = { name : new cosy.Token(cosy.TokenType.Super,"super",null,_g18.line), state : cosy._Resolver.VariableState.Read, mutable : false, member : false};
				var _this = this1[this1.length - 1];
				if(__map_reserved["super"] != null) {
					_this.setReserved("super",value);
				} else {
					_this.h["super"] = value;
				}
			}
			this.beginScope();
			var this2 = this.scopes;
			var value1 = { name : new cosy.Token(cosy.TokenType.This,"this",null,_g18.line), state : cosy._Resolver.VariableState.Read, mutable : false, member : false};
			var _this1 = this2[this2.length - 1];
			if(__map_reserved["this"] != null) {
				_this1.setReserved("this",value1);
			} else {
				_this1.h["this"] = value1;
			}
			var _g1 = 0;
			while(_g1 < _g20.length) {
				var method = _g20[_g1];
				++_g1;
				if(method._hx_index == 6) {
					var _g2 = method.name;
					this.resolveFunction(_g2,method.params,method.body,_g2.lexeme == "init" ? cosy._Resolver.FunctionType.Initializer : cosy._Resolver.FunctionType.Method);
				}
			}
			this.endScope();
			if(_g19 != null) {
				this.endScope();
			}
			this.currentClass = enclosingClass;
			break;
		case 2:
			this.resolveExpr(stmt.e);
			break;
		case 3:
			var _g12 = stmt.body;
			var _g9 = stmt.name;
			this.resolveExpr(stmt.from);
			this.resolveExpr(stmt.to);
			this.beginScope();
			if(_g9 != null) {
				this.declare(_g9);
				this.define(_g9);
			}
			if(_g12.length == 0) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(stmt.keyword),"Loop body is empty.");
			}
			this.resolveStmts(_g12);
			this.endScope();
			break;
		case 4:
			var _g32 = stmt.body;
			var _g30 = stmt.name;
			this.resolveExpr(stmt.array);
			this.beginScope();
			this.declare(_g30);
			this.define(_g30);
			if(_g32.length == 0) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g30),"Loop body is empty.");
			}
			this.resolveStmts(_g32);
			this.endScope();
			break;
		case 5:
			var _g3 = stmt.cond;
			if(_g3 != null) {
				this.resolveExpr(_g3);
			}
			this.beginScope();
			this.resolveStmts(stmt.body);
			this.endScope();
			break;
		case 6:
			var _g21 = stmt.name;
			this.declare(_g21);
			this.define(_g21);
			this.resolveFunction(_g21,stmt.params,stmt.body,cosy._Resolver.FunctionType.Function);
			break;
		case 7:
			var _g4 = stmt.el;
			this.resolveExpr(stmt.cond);
			this.resolveStmt(stmt.then);
			if(_g4 != null) {
				this.resolveStmt(_g4);
			}
			break;
		case 8:
			var _g7 = stmt.init;
			var _g5 = stmt.name;
			var member = this.currentStruct._hx_index == 1;
			this.declare(_g5,true,member);
			if(_g7 != null) {
				this.resolveExpr(_g7);
			}
			this.define(_g5,true,member);
			break;
		case 9:
			this.resolveExpr(stmt.e);
			break;
		case 10:
			var _g29 = stmt.value;
			var _g28 = stmt.keyword;
			if(this.currentFunction == cosy._Resolver.FunctionType.None) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g28),"Cannot return from top-level code.");
			}
			if(_g29 != null) {
				if(this.currentFunction == cosy._Resolver.FunctionType.Initializer) {
					cosy.Cosy.error(cosy.ErrorDataType.Token(_g28),"Cannot return value from an initializer.");
				}
				this.resolveExpr(_g29);
			}
			break;
		case 11:
			var _g16 = stmt.name;
			this.declare(_g16);
			this.define(_g16);
			this.currentStruct = cosy._Resolver.StructType.Struct;
			this.beginScope();
			this.resolveStmts(stmt.declarations);
			this.endScope();
			this.currentStruct = cosy._Resolver.StructType.None;
			break;
		case 12:
			var _g15 = stmt.init;
			var _g13 = stmt.name;
			var member1 = this.currentStruct._hx_index == 1;
			this.declare(_g13,false,member1);
			if(_g15 != null) {
				this.resolveExpr(_g15);
			}
			this.define(_g13,false,member1);
			break;
		}
	}
	resolveExpr(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g4 = expr.exprs;
			var _g = 0;
			while(_g < _g4.length) this.resolveExpr(_g4[_g++]);
			break;
		case 1:
			var _g5 = expr.name;
			var variable = this.findInScopes(_g5);
			if(variable != null && !variable.mutable) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g5),"Cannot reassign non-mutable variable.");
			}
			this.resolveExpr(expr.value);
			this.resolveLocal(expr,_g5,false);
			break;
		case 2:
			this.resolveExpr(expr.left);
			this.resolveExpr(expr.right);
			break;
		case 3:
			var _g14 = expr.$arguments;
			this.resolveExpr(expr.callee);
			var _g1 = 0;
			while(_g1 < _g14.length) this.resolveExpr(_g14[_g1++]);
			break;
		case 4:
			this.resolveExpr(expr.obj);
			break;
		case 5:
			this.resolveExpr(expr.e);
			break;
		case 6:
			break;
		case 7:
			this.resolveExpr(expr.left);
			this.resolveExpr(expr.right);
			break;
		case 8:
			var _g21 = expr.name;
			var _g20 = expr.obj;
			this.resolveExpr(expr.value);
			this.resolveExpr(_g20);
			switch(_g20._hx_index) {
			case 9:
				break;
			case 13:
				var variable1 = this.findInScopes(_g20.name);
				if(variable1 != null && !variable1.mutable) {
					cosy.Cosy.error(cosy.ErrorDataType.Token(_g21),"Cannot reassign properties on non-mutable struct.");
				}
				break;
			default:
				console.log("src/cosy/Resolver.hx:176:",_g20);
				throw new js._Boot.HaxeError("this is unexpected");
			}
			break;
		case 9:
			var _g2 = expr.keyword;
			if(this.currentClass == cosy._Resolver.ClassType.None) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g2),"Cannot use \"this\" outside of a class.");
			} else {
				this.resolveLocal(expr,_g2,true);
			}
			break;
		case 10:
			var _g23 = expr.keyword;
			switch(this.currentClass._hx_index) {
			case 0:
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g23),"Cannot use \"super\" outside of a class.");
				break;
			case 1:
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g23),"Cannot use \"super\" in a class with no superclass.");
				break;
			case 2:
				break;
			}
			this.resolveLocal(expr,_g23,true);
			break;
		case 11:
			var _g10 = expr.decls;
			var _g9 = expr.name;
			var _g3 = 0;
			while(_g3 < _g10.length) {
				var decl = _g10[_g3];
				++_g3;
				if(decl._hx_index == 1) {
					this.resolveExpr(decl.value);
				}
			}
			this.resolveLocal(expr,_g9,true);
			break;
		case 12:
			this.resolveExpr(expr.right);
			break;
		case 13:
			var _g8 = expr.name;
			var tmp;
			var this1 = this.scopes;
			var key = _g8.lexeme;
			var _this = this1[this1.length - 1];
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				var this2 = this.scopes;
				var key1 = _g8.lexeme;
				var _this1 = this2[this2.length - 1];
				tmp = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).state._hx_index == 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g8),"Cannot read local variable in its own initializer");
			}
			if(StringTools.startsWith(_g8.lexeme,"_")) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g8),"Variables starting with _ are considered unused.");
			}
			this.resolveLocal(expr,_g8,true);
			break;
		case 14:
			this.resolveFunction(null,expr.params,expr.body,cosy._Resolver.FunctionType.Function);
			break;
		}
	}
	resolveFunction(name,params,body,type) {
		var enclosingFunction = this.currentFunction;
		this.currentFunction = type;
		this.beginScope();
		var _g = 0;
		while(_g < params.length) {
			var param = params[_g];
			++_g;
			this.declare(param.name);
			this.define(param.name);
		}
		this.resolveStmts(body);
		this.endScope();
		this.currentFunction = enclosingFunction;
	}
	beginScope() {
		this.scopes.push(new haxe.ds.StringMap());
	}
	endScope() {
		var _g = new haxe.iterators.MapKeyValueIterator(this.scopes.pop());
		while(_g.hasNext()) {
			var variable = _g.next().value;
			if(StringTools.startsWith(variable.name.lexeme,"_")) {
				continue;
			}
			if(!variable.member && variable.state._hx_index == 1) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(variable.name),"Local variable is not used.");
			}
		}
	}
	declare(name,mutable,member) {
		if(member == null) {
			member = false;
		}
		if(mutable == null) {
			mutable = false;
		}
		var this1 = this.scopes;
		var scope = this1[this1.length - 1];
		var key = name.lexeme;
		if(__map_reserved[key] != null ? scope.existsReserved(key) : scope.h.hasOwnProperty(key)) {
			cosy.Cosy.error(cosy.ErrorDataType.Token(name),"Variable with this name already declared in this scope.");
		} else if(this.findInScopes(name) != null) {
			cosy.Cosy.error(cosy.ErrorDataType.Token(name),"Shadows existing variable.");
		}
		var key1 = name.lexeme;
		var value = { name : name, state : cosy._Resolver.VariableState.Declared, mutable : mutable, member : member};
		if(__map_reserved[key1] != null) {
			scope.setReserved(key1,value);
		} else {
			scope.h[key1] = value;
		}
	}
	define(name,mutable,member) {
		if(member == null) {
			member = false;
		}
		if(mutable == null) {
			mutable = false;
		}
		var this1 = this.scopes;
		var key = name.lexeme;
		var _this = this1[this1.length - 1];
		var value = { name : name, state : cosy._Resolver.VariableState.Defined, mutable : mutable, member : member};
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	resolveLocal(expr,name,isRead) {
		var i = this.scopes.length - 1;
		while(i >= 0) {
			var scope = this.scopes[i];
			var key = name.lexeme;
			if(__map_reserved[key] != null ? scope.existsReserved(key) : scope.h.hasOwnProperty(key)) {
				this.interpreter.resolve(expr,this.scopes.length - 1 - i);
				if(isRead) {
					var key1 = name.lexeme;
					(__map_reserved[key1] != null ? scope.getReserved(key1) : scope.h[key1]).state = cosy._Resolver.VariableState.Read;
				}
				return;
			}
			--i;
		}
		if(name.lexeme == "clock" || name.lexeme == "random" || name.lexeme == "str_length" || name.lexeme == "str_charAt" || name.lexeme == "input") {
			return;
		}
		cosy.Cosy.error(cosy.ErrorDataType.Token(name),"Variable not declared in this scope.");
	}
	findInScopes(name) {
		var identifier = name.lexeme;
		var i = this.scopes.length - 1;
		while(i >= 0) {
			var scope = this.scopes[i];
			if(__map_reserved[identifier] != null ? scope.existsReserved(identifier) : scope.h.hasOwnProperty(identifier)) {
				return __map_reserved[identifier] != null ? scope.getReserved(identifier) : scope.h[identifier];
			}
			--i;
		}
		return null;
	}
}
cosy.Resolver.__name__ = true;
Object.assign(cosy.Resolver.prototype, {
	__class__: cosy.Resolver
});
cosy._Resolver = {};
cosy._Resolver.VariableState = $hxEnums["cosy._Resolver.VariableState"] = { __ename__ : true, __constructs__ : ["Declared","Defined","Read"]
	,Declared: {_hx_index:0,__enum__:"cosy._Resolver.VariableState",toString:$estr}
	,Defined: {_hx_index:1,__enum__:"cosy._Resolver.VariableState",toString:$estr}
	,Read: {_hx_index:2,__enum__:"cosy._Resolver.VariableState",toString:$estr}
};
cosy._Resolver.FunctionType = $hxEnums["cosy._Resolver.FunctionType"] = { __ename__ : true, __constructs__ : ["None","Method","Initializer","Function"]
	,None: {_hx_index:0,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Method: {_hx_index:1,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Initializer: {_hx_index:2,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Function: {_hx_index:3,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
};
cosy._Resolver.StructType = $hxEnums["cosy._Resolver.StructType"] = { __ename__ : true, __constructs__ : ["None","Struct"]
	,None: {_hx_index:0,__enum__:"cosy._Resolver.StructType",toString:$estr}
	,Struct: {_hx_index:1,__enum__:"cosy._Resolver.StructType",toString:$estr}
};
cosy._Resolver.ClassType = $hxEnums["cosy._Resolver.ClassType"] = { __ename__ : true, __constructs__ : ["None","Class","Subclass"]
	,None: {_hx_index:0,__enum__:"cosy._Resolver.ClassType",toString:$estr}
	,Class: {_hx_index:1,__enum__:"cosy._Resolver.ClassType",toString:$estr}
	,Subclass: {_hx_index:2,__enum__:"cosy._Resolver.ClassType",toString:$estr}
};
cosy.Return = class cosy_Return extends cosy.Error {
	constructor(value) {
		super();
		this.value = value;
	}
}
cosy.Return.__name__ = true;
cosy.Return.__super__ = cosy.Error;
Object.assign(cosy.Return.prototype, {
	__class__: cosy.Return
});
cosy.RuntimeError = class cosy_RuntimeError extends cosy.Error {
	constructor(token,message) {
		super(message);
		this.token = token;
	}
}
cosy.RuntimeError.__name__ = true;
cosy.RuntimeError.__super__ = cosy.Error;
Object.assign(cosy.RuntimeError.prototype, {
	__class__: cosy.RuntimeError
});
cosy.TokenType = $hxEnums["cosy.TokenType"] = { __ename__ : true, __constructs__ : ["LeftParen","RightParen","LeftBrace","RightBrace","LeftBracket","RightBracket","Comma","Dot","DotDot","Minus","Plus","Slash","Star","Underscore","Bang","BangEqual","Equal","EqualEqual","Greater","GreaterEqual","Less","LessEqual","Identifier","String","Number","And","Class","Else","False","Fn","For","In","If","Mut","Or","Print","Return","Struct","Super","This","True","Var","BooleanType","NumberType","StringType","FunctionType","ArrayType","Eof"]
	,LeftParen: {_hx_index:0,__enum__:"cosy.TokenType",toString:$estr}
	,RightParen: {_hx_index:1,__enum__:"cosy.TokenType",toString:$estr}
	,LeftBrace: {_hx_index:2,__enum__:"cosy.TokenType",toString:$estr}
	,RightBrace: {_hx_index:3,__enum__:"cosy.TokenType",toString:$estr}
	,LeftBracket: {_hx_index:4,__enum__:"cosy.TokenType",toString:$estr}
	,RightBracket: {_hx_index:5,__enum__:"cosy.TokenType",toString:$estr}
	,Comma: {_hx_index:6,__enum__:"cosy.TokenType",toString:$estr}
	,Dot: {_hx_index:7,__enum__:"cosy.TokenType",toString:$estr}
	,DotDot: {_hx_index:8,__enum__:"cosy.TokenType",toString:$estr}
	,Minus: {_hx_index:9,__enum__:"cosy.TokenType",toString:$estr}
	,Plus: {_hx_index:10,__enum__:"cosy.TokenType",toString:$estr}
	,Slash: {_hx_index:11,__enum__:"cosy.TokenType",toString:$estr}
	,Star: {_hx_index:12,__enum__:"cosy.TokenType",toString:$estr}
	,Underscore: {_hx_index:13,__enum__:"cosy.TokenType",toString:$estr}
	,Bang: {_hx_index:14,__enum__:"cosy.TokenType",toString:$estr}
	,BangEqual: {_hx_index:15,__enum__:"cosy.TokenType",toString:$estr}
	,Equal: {_hx_index:16,__enum__:"cosy.TokenType",toString:$estr}
	,EqualEqual: {_hx_index:17,__enum__:"cosy.TokenType",toString:$estr}
	,Greater: {_hx_index:18,__enum__:"cosy.TokenType",toString:$estr}
	,GreaterEqual: {_hx_index:19,__enum__:"cosy.TokenType",toString:$estr}
	,Less: {_hx_index:20,__enum__:"cosy.TokenType",toString:$estr}
	,LessEqual: {_hx_index:21,__enum__:"cosy.TokenType",toString:$estr}
	,Identifier: {_hx_index:22,__enum__:"cosy.TokenType",toString:$estr}
	,String: {_hx_index:23,__enum__:"cosy.TokenType",toString:$estr}
	,Number: {_hx_index:24,__enum__:"cosy.TokenType",toString:$estr}
	,And: {_hx_index:25,__enum__:"cosy.TokenType",toString:$estr}
	,Class: {_hx_index:26,__enum__:"cosy.TokenType",toString:$estr}
	,Else: {_hx_index:27,__enum__:"cosy.TokenType",toString:$estr}
	,False: {_hx_index:28,__enum__:"cosy.TokenType",toString:$estr}
	,Fn: {_hx_index:29,__enum__:"cosy.TokenType",toString:$estr}
	,For: {_hx_index:30,__enum__:"cosy.TokenType",toString:$estr}
	,In: {_hx_index:31,__enum__:"cosy.TokenType",toString:$estr}
	,If: {_hx_index:32,__enum__:"cosy.TokenType",toString:$estr}
	,Mut: {_hx_index:33,__enum__:"cosy.TokenType",toString:$estr}
	,Or: {_hx_index:34,__enum__:"cosy.TokenType",toString:$estr}
	,Print: {_hx_index:35,__enum__:"cosy.TokenType",toString:$estr}
	,Return: {_hx_index:36,__enum__:"cosy.TokenType",toString:$estr}
	,Struct: {_hx_index:37,__enum__:"cosy.TokenType",toString:$estr}
	,Super: {_hx_index:38,__enum__:"cosy.TokenType",toString:$estr}
	,This: {_hx_index:39,__enum__:"cosy.TokenType",toString:$estr}
	,True: {_hx_index:40,__enum__:"cosy.TokenType",toString:$estr}
	,Var: {_hx_index:41,__enum__:"cosy.TokenType",toString:$estr}
	,BooleanType: {_hx_index:42,__enum__:"cosy.TokenType",toString:$estr}
	,NumberType: {_hx_index:43,__enum__:"cosy.TokenType",toString:$estr}
	,StringType: {_hx_index:44,__enum__:"cosy.TokenType",toString:$estr}
	,FunctionType: {_hx_index:45,__enum__:"cosy.TokenType",toString:$estr}
	,ArrayType: {_hx_index:46,__enum__:"cosy.TokenType",toString:$estr}
	,Eof: {_hx_index:47,__enum__:"cosy.TokenType",toString:$estr}
};
cosy.Scanner = class cosy_Scanner {
	constructor(source) {
		this.line = 1;
		this.current = 0;
		this.start = 0;
		this.tokens = [];
		this.source = source;
	}
	scanTokens() {
		while(!this.isAtEnd()) {
			this.start = this.current;
			this.scanToken();
		}
		this.tokens.push(new cosy.Token(cosy.TokenType.Eof,"",null,this.line));
		return this.tokens;
	}
	scanToken() {
		var c = this.advance();
		switch(c) {
		case 10:
			this.line++;
			break;
		case 9:case 13:case 32:
			break;
		case 33:
			this.addToken(this.match(61) ? cosy.TokenType.BangEqual : cosy.TokenType.Bang);
			break;
		case 39:
			this.string();
			break;
		case 40:
			this.addToken(cosy.TokenType.LeftParen);
			break;
		case 41:
			this.addToken(cosy.TokenType.RightParen);
			break;
		case 42:
			this.addToken(cosy.TokenType.Star);
			break;
		case 43:
			this.addToken(cosy.TokenType.Plus);
			break;
		case 44:
			this.addToken(cosy.TokenType.Comma);
			break;
		case 45:
			this.addToken(cosy.TokenType.Minus);
			break;
		case 46:
			this.addToken(this.match(46) ? cosy.TokenType.DotDot : cosy.TokenType.Dot);
			break;
		case 47:
			if(this.match(47)) {
				while(this.peek() != 10 && !this.isAtEnd()) this.advance();
			} else {
				this.addToken(cosy.TokenType.Slash);
			}
			break;
		case 60:
			this.addToken(this.match(61) ? cosy.TokenType.LessEqual : cosy.TokenType.Less);
			break;
		case 61:
			this.addToken(this.match(61) ? cosy.TokenType.EqualEqual : cosy.TokenType.Equal);
			break;
		case 62:
			this.addToken(this.match(61) ? cosy.TokenType.GreaterEqual : cosy.TokenType.Greater);
			break;
		case 91:
			this.addToken(cosy.TokenType.LeftBracket);
			break;
		case 93:
			this.addToken(cosy.TokenType.RightBracket);
			break;
		case 95:
			if(!this.isAlpha(this.peek())) {
				this.addToken(cosy.TokenType.Underscore);
			} else if(this.isDigit(c)) {
				this.number();
			} else if(this.isAlpha(c)) {
				this.identifier();
			} else {
				cosy.Cosy.error(cosy.ErrorDataType.Line(this.line),"Unexpected character: " + String.fromCodePoint(c));
			}
			break;
		case 123:
			this.addToken(cosy.TokenType.LeftBrace);
			break;
		case 125:
			this.addToken(cosy.TokenType.RightBrace);
			break;
		default:
			if(this.isDigit(c)) {
				this.number();
			} else if(this.isAlpha(c)) {
				this.identifier();
			} else {
				cosy.Cosy.error(cosy.ErrorDataType.Line(this.line),"Unexpected character: " + String.fromCodePoint(c));
			}
		}
	}
	identifier() {
		while(this.isAlphaNumeric(this.peek())) this.advance();
		var text = this.source.substring(this.start,this.current);
		var _this = cosy.Scanner.keywords;
		var _g = __map_reserved[text] != null ? _this.getReserved(text) : _this.h[text];
		this.addToken(_g == null ? cosy.TokenType.Identifier : _g);
	}
	string() {
		while((this.peek() != 39 || this.peekPrevious() == 92) && !this.isAtEnd()) {
			if(this.peek() == 10) {
				this.line++;
			}
			this.advance();
		}
		if(this.isAtEnd()) {
			cosy.Cosy.error(cosy.ErrorDataType.Line(this.line),"Unterminated string.");
			return;
		}
		this.advance();
		this.addToken(cosy.TokenType.String,StringTools.replace(this.source.substring(this.start + 1,this.current - 1),"\\'","'"));
	}
	number() {
		while(this.isDigit(this.peek())) this.advance();
		if(this.peek() == 46 && this.isDigit(this.peekNext())) {
			this.advance();
			while(this.isDigit(this.peek())) this.advance();
		}
		this.addToken(cosy.TokenType.Number,parseFloat(this.source.substring(this.start,this.current)));
	}
	isDigit(c) {
		if(c >= 48) {
			return c <= 57;
		} else {
			return false;
		}
	}
	isAlpha(c) {
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return c == 95;
		} else {
			return true;
		}
	}
	isAlphaNumeric(c) {
		if(!this.isAlpha(c)) {
			return this.isDigit(c);
		} else {
			return true;
		}
	}
	match(expected) {
		if(this.isAtEnd()) {
			return false;
		}
		if(HxOverrides.cca(this.source,this.current) != expected) {
			return false;
		}
		this.current++;
		return true;
	}
	peek() {
		if(this.isAtEnd()) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current);
	}
	peekNext() {
		if(this.current + 1 >= this.source.length) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current + 1);
	}
	peekPrevious() {
		if(this.current - 1 >= this.source.length) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current - 1);
	}
	advance() {
		this.current++;
		return HxOverrides.cca(this.source,this.current - 1);
	}
	addToken(type,literal) {
		this.tokens.push(new cosy.Token(type,this.source.substring(this.start,this.current),literal,this.line));
	}
	isAtEnd() {
		return this.current >= this.source.length;
	}
}
cosy.Scanner.__name__ = true;
Object.assign(cosy.Scanner.prototype, {
	__class__: cosy.Scanner
});
cosy.Stmt = $hxEnums["cosy.Stmt"] = { __ename__ : true, __constructs__ : ["Block","Class","Expression","For","ForArray","ForCondition","Function","If","Mut","Print","Return","Struct","Var"]
	,Block: ($_=function(statements) { return {_hx_index:0,statements:statements,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["statements"],$_)
	,Class: ($_=function(name,superclass,methods) { return {_hx_index:1,name:name,superclass:superclass,methods:methods,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","superclass","methods"],$_)
	,Expression: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["e"],$_)
	,For: ($_=function(keyword,name,from,to,body) { return {_hx_index:3,keyword:keyword,name:name,from:from,to:to,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["keyword","name","from","to","body"],$_)
	,ForArray: ($_=function(name,array,body) { return {_hx_index:4,name:name,array:array,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","array","body"],$_)
	,ForCondition: ($_=function(cond,body) { return {_hx_index:5,cond:cond,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["cond","body"],$_)
	,Function: ($_=function(name,params,body,returnType) { return {_hx_index:6,name:name,params:params,body:body,returnType:returnType,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","params","body","returnType"],$_)
	,If: ($_=function(cond,then,el) { return {_hx_index:7,cond:cond,then:then,el:el,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["cond","then","el"],$_)
	,Mut: ($_=function(name,type,init) { return {_hx_index:8,name:name,type:type,init:init,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","type","init"],$_)
	,Print: ($_=function(e) { return {_hx_index:9,e:e,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Return: ($_=function(keyword,value) { return {_hx_index:10,keyword:keyword,value:value,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["keyword","value"],$_)
	,Struct: ($_=function(name,declarations) { return {_hx_index:11,name:name,declarations:declarations,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","declarations"],$_)
	,Var: ($_=function(name,type,init) { return {_hx_index:12,name:name,type:type,init:init,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","type","init"],$_)
};
cosy.StructInstance = class cosy_StructInstance {
	constructor(name,fields) {
		this.structName = name;
		this.fields = fields;
	}
	get(name) {
		var key = name.lexeme;
		var _this = this.fields;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.fields;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		throw new js._Boot.HaxeError(new cosy.RuntimeError(name,"Undefined property \"" + name.lexeme + "\"."));
	}
	set(name,value) {
		var key = name.lexeme;
		var _this = this.fields;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			cosy.Cosy.error(cosy.ErrorDataType.Token(name),"" + name.lexeme + " is not a property of " + name.lexeme);
			return;
		}
		var key1 = name.lexeme;
		var _this1 = this.fields;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,value);
		} else {
			_this1.h[key1] = value;
		}
	}
	toString() {
		var _g = [];
		var _g1 = new haxe.iterators.MapKeyValueIterator(this.fields);
		while(_g1.hasNext()) {
			var _g2 = _g1.next();
			_g.push("" + _g2.key + " = " + Std.string(_g2.value));
		}
		return "" + this.structName.lexeme + " instance { " + _g.join(", ") + " }";
	}
}
cosy.StructInstance.__name__ = true;
Object.assign(cosy.StructInstance.prototype, {
	__class__: cosy.StructInstance
});
cosy.Token = class cosy_Token {
	constructor(type,lexeme,literal,line) {
		this.type = type;
		this.lexeme = lexeme;
		this.literal = literal;
		this.line = line;
	}
	toString() {
		return "Token { type: " + Std.string(this.type) + ", lexeme: \"" + this.lexeme + "\"" + (this.literal != null ? ", literal: " + Std.string(this.literal) : "") + " }";
	}
}
cosy.Token.__name__ = true;
Object.assign(cosy.Token.prototype, {
	__class__: cosy.Token
});
cosy.VariableType = $hxEnums["cosy.VariableType"] = { __ename__ : true, __constructs__ : ["Unknown","Void","Boolean","Number","Text","Instance","Function","Array","Struct","NamedStruct","Mutable"]
	,Unknown: {_hx_index:0,__enum__:"cosy.VariableType",toString:$estr}
	,Void: {_hx_index:1,__enum__:"cosy.VariableType",toString:$estr}
	,Boolean: {_hx_index:2,__enum__:"cosy.VariableType",toString:$estr}
	,Number: {_hx_index:3,__enum__:"cosy.VariableType",toString:$estr}
	,Text: {_hx_index:4,__enum__:"cosy.VariableType",toString:$estr}
	,Instance: {_hx_index:5,__enum__:"cosy.VariableType",toString:$estr}
	,Function: ($_=function(paramTypes,returnType) { return {_hx_index:6,paramTypes:paramTypes,returnType:returnType,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["paramTypes","returnType"],$_)
	,Array: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["type"],$_)
	,Struct: ($_=function(variables) { return {_hx_index:8,variables:variables,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["variables"],$_)
	,NamedStruct: ($_=function(name) { return {_hx_index:9,name:name,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["name"],$_)
	,Mutable: ($_=function(type) { return {_hx_index:10,type:type,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
cosy.Typer = class cosy_Typer {
	constructor() {
		this.inferredReturnType = cosy.VariableType.Void;
		this.typedReturnType = cosy.VariableType.Unknown;
		this.variableTypes = new haxe.ds.StringMap();
		this.structsMeta = new haxe.ds.StringMap();
		var _this = this.variableTypes;
		var value = cosy.VariableType.Number;
		if(__map_reserved["clock"] != null) {
			_this.setReserved("clock",value);
		} else {
			_this.h["clock"] = value;
		}
		var _this1 = this.variableTypes;
		var value1 = cosy.VariableType.Number;
		if(__map_reserved["random"] != null) {
			_this1.setReserved("random",value1);
		} else {
			_this1.h["random"] = value1;
		}
		var _this2 = this.variableTypes;
		var value2 = cosy.VariableType.Number;
		if(__map_reserved["str_length"] != null) {
			_this2.setReserved("str_length",value2);
		} else {
			_this2.h["str_length"] = value2;
		}
		var _this3 = this.variableTypes;
		var value3 = cosy.VariableType.Text;
		if(__map_reserved["str_charAt"] != null) {
			_this3.setReserved("str_charAt",value3);
		} else {
			_this3.h["str_charAt"] = value3;
		}
		var _this4 = this.variableTypes;
		var value4 = cosy.VariableType.Text;
		if(__map_reserved["input"] != null) {
			_this4.setReserved("input",value4);
		} else {
			_this4.h["input"] = value4;
		}
	}
	typeStmts(stmts) {
		var _g = 0;
		while(_g < stmts.length) this.typeStmt(stmts[_g++]);
	}
	typeStmt(stmt) {
		switch(stmt._hx_index) {
		case 0:
			this.typeStmts(stmt.statements);
			break;
		case 1:
			this.typeStmts(stmt.methods);
			break;
		case 2:
			this.typeExpr(stmt.e);
			break;
		case 3:
			var _g12 = stmt.body;
			var _g11 = stmt.to;
			var _g9 = stmt.name;
			var _g8 = stmt.keyword;
			switch(this.typeExpr(stmt.from)._hx_index) {
			case 0:
				cosy.Cosy.warning(cosy.ErrorDataType.Token(_g8),"\"From\" clause has type Unknown");
				break;
			case 3:
				break;
			default:
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g8),"\"From\" clause must evaluate to a number");
			}
			switch(this.typeExpr(_g11)._hx_index) {
			case 0:
				cosy.Cosy.warning(cosy.ErrorDataType.Token(_g8),"\"To\" clause has type Unknown");
				break;
			case 3:
				break;
			default:
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g8),"\"To\" clause must evaluate to a number");
			}
			if(_g9 != null) {
				var key = _g9.lexeme;
				var _this = this.variableTypes;
				var value = cosy.VariableType.Number;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
			}
			this.typeStmts(_g12);
			break;
		case 4:
			var _g32 = stmt.body;
			var _g30 = stmt.name;
			var arrayType = this.typeExpr(stmt.array);
			switch(arrayType._hx_index) {
			case 0:
				var key1 = _g30.lexeme;
				var _this1 = this.variableTypes;
				var value1 = cosy.VariableType.Unknown;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,value1);
				} else {
					_this1.h[key1] = value1;
				}
				break;
			case 7:
				var _g = arrayType.type;
				var key2 = _g30.lexeme;
				var _this2 = this.variableTypes;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,_g);
				} else {
					_this2.h[key2] = _g;
				}
				break;
			default:
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g30),"Can only loop over value of type array.");
			}
			this.typeStmts(_g32);
			break;
		case 5:
			this.typeStmts(stmt.body);
			break;
		case 6:
			this.handleFunc(stmt.name,stmt.params,stmt.body,stmt.returnType);
			break;
		case 7:
			var _g4 = stmt.el;
			this.typeStmt(stmt.then);
			if(_g4 != null) {
				this.typeStmt(_g4);
			}
			break;
		case 8:
			this.typeVar(stmt.name,stmt.type,stmt.init);
			break;
		case 9:
			this.typeExpr(stmt.e);
			break;
		case 10:
			var _g29 = stmt.value;
			if(_g29 != null) {
				this.inferredReturnType = this.typeExpr(_g29);
				if(!this.matchType(this.inferredReturnType,this.typedReturnType)) {
					cosy.Cosy.error(cosy.ErrorDataType.Token(stmt.keyword),"Function expected to return " + this.formatType(this.typedReturnType) + " but got " + this.formatType(this.inferredReturnType));
				}
			} else {
				this.inferredReturnType = cosy.VariableType.Void;
			}
			break;
		case 11:
			var _g17 = stmt.declarations;
			var _g16 = stmt.name;
			var structMeta = { members : new haxe.ds.StringMap()};
			var decls = new haxe.ds.StringMap();
			var _g1 = 0;
			while(_g1 < _g17.length) {
				var decl = _g17[_g1];
				++_g1;
				switch(decl._hx_index) {
				case 8:
					var _g2 = decl.init;
					var _g3 = decl.name;
					var key3 = _g3.lexeme;
					var _this3 = structMeta.members;
					var value2 = { mutable : true, initialized : _g2 != null};
					if(__map_reserved[key3] != null) {
						_this3.setReserved(key3,value2);
					} else {
						_this3.h[key3] = value2;
					}
					var key4 = _g3.lexeme;
					var value3 = cosy.VariableType.Mutable(this.typeVar(_g3,decl.type,_g2));
					if(__map_reserved[key4] != null) {
						decls.setReserved(key4,value3);
					} else {
						decls.h[key4] = value3;
					}
					break;
				case 12:
					var _g5 = decl.init;
					var _g31 = decl.name;
					var key5 = _g31.lexeme;
					var _this4 = structMeta.members;
					var value4 = { mutable : false, initialized : _g5 != null};
					if(__map_reserved[key5] != null) {
						_this4.setReserved(key5,value4);
					} else {
						_this4.h[key5] = value4;
					}
					var key6 = _g31.lexeme;
					var value5 = this.typeVar(_g31,decl.type,_g5);
					if(__map_reserved[key6] != null) {
						decls.setReserved(key6,value5);
					} else {
						decls.h[key6] = value5;
					}
					break;
				default:
					throw new js._Boot.HaxeError("structs can only have var and mut");
				}
			}
			var key7 = _g16.lexeme;
			var _this5 = this.structsMeta;
			if(__map_reserved[key7] != null) {
				_this5.setReserved(key7,structMeta);
			} else {
				_this5.h[key7] = structMeta;
			}
			var key8 = _g16.lexeme;
			var value6 = cosy.VariableType.Struct(decls);
			var _this6 = this.variableTypes;
			if(__map_reserved[key8] != null) {
				_this6.setReserved(key8,value6);
			} else {
				_this6.h[key8] = value6;
			}
			break;
		case 12:
			this.typeVar(stmt.name,stmt.type,stmt.init);
			break;
		}
	}
	typeVar(name,type,init) {
		var initType = init != null ? this.typeExpr(init) : cosy.VariableType.Unknown;
		if(initType._hx_index == 1) {
			cosy.Cosy.error(cosy.ErrorDataType.Token(name),"Cannot assign Void to a variable");
		}
		if(init != null && !this.matchType(initType,type)) {
			cosy.Cosy.error(cosy.ErrorDataType.Token(name),"Expected variable to have type " + this.formatType(type) + " but got " + this.formatType(initType) + ".");
		}
		var computedType = type._hx_index != 0 ? type : initType;
		var key = name.lexeme;
		var _this = this.variableTypes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,computedType);
		} else {
			_this.h[key] = computedType;
		}
		return computedType;
	}
	typeExpr(expr) {
		var ret;
		switch(expr._hx_index) {
		case 0:
			var _g4 = expr.exprs;
			var _g3 = expr.keyword;
			var arrayType = cosy.VariableType.Unknown;
			var _g = 0;
			var _g1 = _g4.length;
			while(_g < _g1) {
				var i = _g++;
				var elemType = this.typeExpr(_g4[i]);
				if(elemType._hx_index != 0) {
					if(arrayType._hx_index == 0) {
						arrayType = elemType;
					} else if(!this.matchType(elemType,arrayType)) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g3),"Array values expected to be " + this.formatType(arrayType) + " but got " + this.formatType(elemType) + " at index " + i + ".");
					}
				}
			}
			return cosy.VariableType.Array(arrayType);
		case 1:
			var _g5 = expr.name;
			var assigningType = this.typeExpr(expr.value);
			var key = _g5.lexeme;
			var _this = this.variableTypes;
			var varType = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(varType == null ? false : varType._hx_index == 0) {
				var key1 = _g5.lexeme;
				var _this1 = this.variableTypes;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,assigningType);
				} else {
					_this1.h[key1] = assigningType;
				}
			} else if(!this.matchType(varType,assigningType)) {
				cosy.Cosy.error(cosy.ErrorDataType.Token(_g5),"Cannot assign " + this.formatType(assigningType) + " to " + this.formatType(varType));
			}
			return assigningType;
		case 2:
			var leftType = this.typeExpr(expr.left);
			var rightType = this.typeExpr(expr.right);
			if(leftType._hx_index == 4 || rightType._hx_index == 4) {
				return cosy.VariableType.Text;
			}
			if(leftType._hx_index == 3 || rightType._hx_index == 3) {
				return cosy.VariableType.Number;
			}
			return cosy.VariableType.Unknown;
		case 3:
			var _g14 = expr.$arguments;
			var _g13 = expr.paren;
			var calleeType = this.typeExpr(expr.callee);
			var type = cosy.VariableType.Unknown;
			if(calleeType._hx_index == 6) {
				var _g2 = calleeType.paramTypes;
				type = calleeType.returnType;
				var _g6 = [];
				var _g11 = 0;
				while(_g11 < _g14.length) _g6.push(this.typeExpr(_g14[_g11++]));
				if(_g14.length != _g2.length) {
					cosy.Cosy.error(cosy.ErrorDataType.Token(_g13),"Expected " + _g2.length + " argument(s) but got " + _g14.length + ".");
				} else {
					var _g21 = 0;
					var _g31 = _g2.length;
					while(_g21 < _g31) {
						var i1 = _g21++;
						if(_g6[i1]._hx_index == 0) {
							cosy.Cosy.warning(cosy.ErrorDataType.Token(_g13),"Argument " + (i1 + 1) + " has type Unknown.");
						}
						if(!this.matchType(_g6[i1],_g2[i1])) {
							cosy.Cosy.error(cosy.ErrorDataType.Token(_g13),"Expected argument " + (i1 + 1) + " to be " + this.formatType(_g2[i1]) + " but got " + this.formatType(_g6[i1]) + ".");
						}
					}
				}
			}
			ret = type;
			break;
		case 4:
			var _g16 = expr.name;
			var objType = this.typeExpr(expr.obj);
			if(objType._hx_index == 7) {
				var _g7 = objType.type;
				switch(_g16.lexeme) {
				case "concat":
					return cosy.VariableType.Function([cosy.VariableType.Array(_g7)],cosy.VariableType.Void);
				case "get":
					return cosy.VariableType.Function([cosy.VariableType.Number],_g7);
				case "length":
					return cosy.VariableType.Number;
				case "pop":
					return cosy.VariableType.Function([],_g7);
				case "push":
					return cosy.VariableType.Function([_g7],cosy.VariableType.Void);
				default:
					cosy.Cosy.error(cosy.ErrorDataType.Token(_g16),"Unknown array property or function.");
					return cosy.VariableType.Void;
				}
			} else {
				return cosy.VariableType.Unknown;
			}
			break;
		case 5:
			ret = this.typeExpr(expr.e);
			break;
		case 6:
			var _g71 = expr.v;
			ret = typeof(_g71) == "number" ? cosy.VariableType.Number : typeof(_g71) == "string" ? cosy.VariableType.Text : typeof(_g71) == "boolean" ? cosy.VariableType.Boolean : cosy.VariableType.Unknown;
			break;
		case 7:
			ret = cosy.VariableType.Boolean;
			break;
		case 8:
			var _g211 = expr.name;
			var objType1 = this.typeExpr(expr.obj);
			if(objType1._hx_index == 8) {
				var _g8 = objType1.variables;
				var key2 = _g211.lexeme;
				if(__map_reserved[key2] != null ? _g8.existsReserved(key2) : _g8.h.hasOwnProperty(key2)) {
					var valueType = this.typeExpr(expr.value);
					var key3 = _g211.lexeme;
					var structDeclType = __map_reserved[key3] != null ? _g8.getReserved(key3) : _g8.h[key3];
					if(!(structDeclType == null ? false : structDeclType._hx_index == 10)) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g211),"Member is not mutable.");
					} else if(!this.matchType(structDeclType,valueType)) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g211),"Expected value of type " + this.formatType(structDeclType) + " but got " + this.formatType(valueType));
					}
				} else {
					cosy.Cosy.error(cosy.ErrorDataType.Token(_g211),"No member named \"" + _g211.lexeme + "\" in struct of type " + this.formatType(objType1));
				}
			}
			ret = cosy.VariableType.Unknown;
			break;
		case 9:
			ret = cosy.VariableType.Instance;
			break;
		case 10:
			ret = cosy.VariableType.Instance;
			break;
		case 11:
			var _g10 = expr.decls;
			var _g9 = expr.name;
			var key4 = _g9.lexeme;
			var _this2 = this.variableTypes;
			var structType = __map_reserved[key4] != null ? _this2.getReserved(key4) : _this2.h[key4];
			var assignedMembers = [];
			var structMembers;
			if(structType == null) {
				throw new js._Boot.HaxeError("unexpected");
			} else if(structType._hx_index == 8) {
				structMembers = structType.variables;
			} else {
				throw new js._Boot.HaxeError("unexpected");
			}
			var _g12 = 0;
			while(_g12 < _g10.length) {
				var decl = _g10[_g12];
				++_g12;
				if(decl._hx_index == 1) {
					var _g15 = decl.name;
					var key5 = _g15.lexeme;
					if(!(__map_reserved[key5] != null ? structMembers.existsReserved(key5) : structMembers.h.hasOwnProperty(key5))) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g15),"No member named \"" + _g15.lexeme + "\" in struct " + _g9.lexeme);
						break;
					} else if(assignedMembers.indexOf(_g15.lexeme) != -1) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g15),"Member already assigned in initializer.");
						break;
					}
					var valueType1 = this.typeExpr(decl.value);
					var key6 = _g15.lexeme;
					var memberType = __map_reserved[key6] != null ? structMembers.getReserved(key6) : structMembers.h[key6];
					assignedMembers.push(_g15.lexeme);
					if(!this.matchType(valueType1,memberType)) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g15),"Expected value to be of type " + this.formatType(memberType) + " but got " + this.formatType(valueType1));
					}
				} else {
					throw new js._Boot.HaxeError("unexpected");
				}
			}
			var key7 = _g9.lexeme;
			var _this3 = this.structsMeta;
			var _g22 = new haxe.iterators.MapKeyValueIterator((__map_reserved[key7] != null ? _this3.getReserved(key7) : _this3.h[key7]).members);
			while(_g22.hasNext()) {
				var _g32 = _g22.next();
				var memberName = _g32.key;
				var memberMeta = _g32.value;
				if(!memberMeta.mutable && !memberMeta.initialized) {
					if(assignedMembers.indexOf(memberName) == -1) {
						cosy.Cosy.error(cosy.ErrorDataType.Token(_g9),"Non-mutable member \"" + memberName + "\" not initialized.");
					}
				}
			}
			ret = structType;
			break;
		case 12:
			ret = this.typeExpr(expr.right);
			break;
		case 13:
			var _g81 = expr.name;
			var key8 = _g81.lexeme;
			var _this4 = this.variableTypes;
			if(__map_reserved[key8] != null ? _this4.existsReserved(key8) : _this4.h.hasOwnProperty(key8)) {
				var key9 = _g81.lexeme;
				var _this5 = this.variableTypes;
				if(__map_reserved[key9] != null) {
					return _this5.getReserved(key9);
				} else {
					return _this5.h[key9];
				}
			} else {
				return cosy.VariableType.Unknown;
			}
			break;
		case 14:
			ret = this.handleFunc(null,expr.params,expr.body,expr.returnType);
			break;
		}
		return ret;
	}
	handleFunc(name,params,body,returnType) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) _g.push(params[_g1++].type);
		var _g2 = 0;
		while(_g2 < params.length) {
			var param = params[_g2];
			++_g2;
			var key = param.name.lexeme;
			var value = param.type;
			var _this = this.variableTypes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		this.typedReturnType = returnType;
		this.inferredReturnType = cosy.VariableType.Void;
		this.typeStmts(body);
		var computedReturnType = returnType._hx_index == 0 ? this.inferredReturnType : returnType;
		if(name != null) {
			var key1 = name.lexeme;
			var value1 = cosy.VariableType.Function(_g,computedReturnType);
			var _this1 = this.variableTypes;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
		return cosy.VariableType.Function(_g,computedReturnType);
	}
	matchType(to,from) {
		switch(to._hx_index) {
		case 6:
			var _g10 = to.returnType;
			var _g9 = to.paramTypes;
			switch(from._hx_index) {
			case 0:
				return true;
			case 6:
				var _g13 = from.returnType;
				var _g12 = from.paramTypes;
				if(_g9.length != _g12.length) {
					return false;
				}
				var _g = 0;
				while(_g < _g9.length) {
					var param1 = _g9[_g++];
					var _g1 = 0;
					while(_g1 < _g12.length) if(!this.matchType(param1,_g12[_g1++])) {
						return false;
					}
				}
				return this.matchType(_g10,_g13);
			case 9:
				var _g14 = from.name;
				var _this = this.variableTypes;
				return this.matchType(to,__map_reserved[_g14] != null ? _this.getReserved(_g14) : _this.h[_g14]);
			case 10:
				return this.matchType(to,from.type);
			default:
				return to == from;
			}
			break;
		case 7:
			var _g4 = to.type;
			switch(from._hx_index) {
			case 0:
				return true;
			case 7:
				if(_g4._hx_index == 0) {
					return true;
				} else {
					return this.matchType(_g4,from.type);
				}
				break;
			case 9:
				var _g7 = from.name;
				var _this1 = this.variableTypes;
				return this.matchType(to,__map_reserved[_g7] != null ? _this1.getReserved(_g7) : _this1.h[_g7]);
			case 10:
				return this.matchType(to,from.type);
			default:
				return to == from;
			}
			break;
		case 8:
			var _g2 = to.variables;
			switch(from._hx_index) {
			case 0:
				return true;
			case 8:
				var _g11 = from.variables;
				var _g3 = new haxe.iterators.MapKeyValueIterator(_g2);
				while(_g3.hasNext()) {
					var _g15 = _g3.next();
					var key = _g15.key;
					var value = _g15.value;
					if(!(__map_reserved[key] != null ? _g11.existsReserved(key) : _g11.h.hasOwnProperty(key)) || (__map_reserved[key] != null ? _g11.getReserved(key) : _g11.h[key]) != value) {
						return false;
					}
				}
				var _g5 = new haxe.iterators.MapKeyValueIterator(_g11);
				while(_g5.hasNext()) {
					var _g16 = _g5.next();
					var key1 = _g16.key;
					var value1 = _g16.value;
					if(!(__map_reserved[key1] != null ? _g2.existsReserved(key1) : _g2.h.hasOwnProperty(key1)) || (__map_reserved[key1] != null ? _g2.getReserved(key1) : _g2.h[key1]) != value1) {
						return false;
					}
				}
				return true;
			case 9:
				var _g31 = from.name;
				var _this2 = this.variableTypes;
				return this.matchType(to,__map_reserved[_g31] != null ? _this2.getReserved(_g31) : _this2.h[_g31]);
			case 10:
				return this.matchType(to,from.type);
			default:
				return to == from;
			}
			break;
		case 10:
			return this.matchType(to.type,from);
		default:
			switch(from._hx_index) {
			case 0:
				return true;
			case 9:
				var _g161 = from.name;
				var _this3 = this.variableTypes;
				return this.matchType(to,__map_reserved[_g161] != null ? _this3.getReserved(_g161) : _this3.h[_g161]);
			case 10:
				return this.matchType(to,from.type);
			default:
				return to == from;
			}
		}
	}
	formatType(type) {
		switch(type._hx_index) {
		case 2:
			return "Bool";
		case 3:
			return "Num";
		case 4:
			return "Str";
		case 6:
			var _g3 = type.returnType;
			var _g2 = type.paramTypes;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g2.length) _g.push(this.formatType(_g2[_g1++]));
			var returnStr = _g3._hx_index == 1 ? "" : " -> " + this.formatType(_g3);
			var funcStr = "Fn(" + _g.join(", ") + ")" + returnStr;
			if(_g3._hx_index == 1) {
				return funcStr;
			} else {
				return "(" + funcStr + ")";
			}
			break;
		case 7:
			var _g11 = type.type;
			if(_g11._hx_index == 0) {
				return "Array";
			} else {
				return "Array(" + this.formatType(_g11) + ")";
			}
			break;
		case 8:
			var _g4 = [];
			var _g12 = new haxe.iterators.MapKeyValueIterator(type.variables);
			while(_g12.hasNext()) {
				var _g21 = _g12.next();
				_g4.push("" + _g21.key + " " + this.formatType(_g21.value));
			}
			_g4.sort(function(a,b) {
				if(a < b) {
					return -1;
				}
				if(b < a) {
					return 1;
				}
				return 0;
			});
			return "Struct { " + _g4.join(", ") + " }";
		case 10:
			return "Mut(" + this.formatType(type.type) + ")";
		default:
			return "" + Std.string(type);
		}
	}
}
cosy.Typer.__name__ = true;
Object.assign(cosy.Typer.prototype, {
	__class__: cosy.Typer
});
var haxe = {};
haxe.IMap = class haxe_IMap {
}
haxe.IMap.__name__ = true;
Object.assign(haxe.IMap.prototype, {
	__class__: haxe.IMap
});
haxe.ds = {};
haxe.ds.ObjectMap = class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	keys() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
}
haxe.ds.ObjectMap.__name__ = true;
haxe.ds.ObjectMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.ObjectMap.prototype, {
	__class__: haxe.ds.ObjectMap
});
haxe.ds.StringMap = class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
}
haxe.ds.StringMap.__name__ = true;
haxe.ds.StringMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.StringMap.prototype, {
	__class__: haxe.ds.StringMap
});
haxe.iterators = {};
haxe.iterators.MapKeyValueIterator = class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
haxe.iterators.MapKeyValueIterator.__name__ = true;
Object.assign(haxe.iterators.MapKeyValueIterator.prototype, {
	__class__: haxe.iterators.MapKeyValueIterator
});
var js = {};
js._Boot = {};
js._Boot.HaxeError = class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js._Boot.HaxeError);
		}
	}
	static wrap(val) {
		if(((val) instanceof Error)) {
			return val;
		} else {
			return new js._Boot.HaxeError(val);
		}
	}
}
js._Boot.HaxeError.__name__ = true;
js._Boot.HaxeError.__super__ = Error;
Object.assign(js._Boot.HaxeError.prototype, {
	__class__: js._Boot.HaxeError
});
js.Boot = class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js.Boot.__nativeClassName(o);
			if(name != null) {
				return js.Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						var _g = [];
						{
							var _g1 = 0;
							var _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								var p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js.Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js.Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js._Boot.HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js.Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js.Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		return js.Boot.__interfLoop(cc.__super__,cl);
	}
	static __implements(o,iface) {
		return js.Boot.__interfLoop(js.Boot.getClass(o),iface);
	}
	static __nativeClassName(o) {
		var name = js.Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js.Boot.__name__ = true;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
haxe.ds.ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js._Boot.HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js.Boot.__toStr = ({ }).toString;
cosy.Interpreter.__meta__ = { fields : { evaluate : { SuppressWarnings : ["checkstyle:CyclomaticComplexity","checkstyle:NestedControlFlow","checkstyle:MethodLength"]}}};
cosy.Interpreter.uninitialized = { };
cosy.Cosy.interpreter = new cosy.Interpreter();
cosy.Cosy.hadError = false;
cosy.Cosy.hadRuntimeError = false;
cosy.Cosy.prettyPrint = false;
cosy.Cosy.javascript = false;
cosy.Cosy.testing = false;
cosy.Cosy.testOutput = "";
cosy.Scanner.keywords = (function($this) {
	var $r;
	var _g = new haxe.ds.StringMap();
	{
		var value = cosy.TokenType.And;
		if(__map_reserved["and"] != null) {
			_g.setReserved("and",value);
		} else {
			_g.h["and"] = value;
		}
	}
	{
		var value1 = cosy.TokenType.Class;
		if(__map_reserved["class"] != null) {
			_g.setReserved("class",value1);
		} else {
			_g.h["class"] = value1;
		}
	}
	{
		var value2 = cosy.TokenType.Else;
		if(__map_reserved["else"] != null) {
			_g.setReserved("else",value2);
		} else {
			_g.h["else"] = value2;
		}
	}
	{
		var value3 = cosy.TokenType.False;
		if(__map_reserved["false"] != null) {
			_g.setReserved("false",value3);
		} else {
			_g.h["false"] = value3;
		}
	}
	{
		var value4 = cosy.TokenType.For;
		if(__map_reserved["for"] != null) {
			_g.setReserved("for",value4);
		} else {
			_g.h["for"] = value4;
		}
	}
	{
		var value5 = cosy.TokenType.Fn;
		if(__map_reserved["fn"] != null) {
			_g.setReserved("fn",value5);
		} else {
			_g.h["fn"] = value5;
		}
	}
	{
		var value6 = cosy.TokenType.In;
		if(__map_reserved["in"] != null) {
			_g.setReserved("in",value6);
		} else {
			_g.h["in"] = value6;
		}
	}
	{
		var value7 = cosy.TokenType.If;
		if(__map_reserved["if"] != null) {
			_g.setReserved("if",value7);
		} else {
			_g.h["if"] = value7;
		}
	}
	{
		var value8 = cosy.TokenType.Mut;
		if(__map_reserved["mut"] != null) {
			_g.setReserved("mut",value8);
		} else {
			_g.h["mut"] = value8;
		}
	}
	{
		var value9 = cosy.TokenType.Or;
		if(__map_reserved["or"] != null) {
			_g.setReserved("or",value9);
		} else {
			_g.h["or"] = value9;
		}
	}
	{
		var value10 = cosy.TokenType.Print;
		if(__map_reserved["print"] != null) {
			_g.setReserved("print",value10);
		} else {
			_g.h["print"] = value10;
		}
	}
	{
		var value11 = cosy.TokenType.Return;
		if(__map_reserved["return"] != null) {
			_g.setReserved("return",value11);
		} else {
			_g.h["return"] = value11;
		}
	}
	{
		var value12 = cosy.TokenType.Struct;
		if(__map_reserved["struct"] != null) {
			_g.setReserved("struct",value12);
		} else {
			_g.h["struct"] = value12;
		}
	}
	{
		var value13 = cosy.TokenType.Super;
		if(__map_reserved["super"] != null) {
			_g.setReserved("super",value13);
		} else {
			_g.h["super"] = value13;
		}
	}
	{
		var value14 = cosy.TokenType.This;
		if(__map_reserved["this"] != null) {
			_g.setReserved("this",value14);
		} else {
			_g.h["this"] = value14;
		}
	}
	{
		var value15 = cosy.TokenType.True;
		if(__map_reserved["true"] != null) {
			_g.setReserved("true",value15);
		} else {
			_g.h["true"] = value15;
		}
	}
	{
		var value16 = cosy.TokenType.Var;
		if(__map_reserved["var"] != null) {
			_g.setReserved("var",value16);
		} else {
			_g.h["var"] = value16;
		}
	}
	{
		var value17 = cosy.TokenType.BooleanType;
		if(__map_reserved["Bool"] != null) {
			_g.setReserved("Bool",value17);
		} else {
			_g.h["Bool"] = value17;
		}
	}
	{
		var value18 = cosy.TokenType.NumberType;
		if(__map_reserved["Num"] != null) {
			_g.setReserved("Num",value18);
		} else {
			_g.h["Num"] = value18;
		}
	}
	{
		var value19 = cosy.TokenType.StringType;
		if(__map_reserved["Str"] != null) {
			_g.setReserved("Str",value19);
		} else {
			_g.h["Str"] = value19;
		}
	}
	{
		var value20 = cosy.TokenType.FunctionType;
		if(__map_reserved["Fn"] != null) {
			_g.setReserved("Fn",value20);
		} else {
			_g.h["Fn"] = value20;
		}
	}
	{
		var value21 = cosy.TokenType.ArrayType;
		if(__map_reserved["Array"] != null) {
			_g.setReserved("Array",value21);
		} else {
			_g.h["Array"] = value21;
		}
	}
	$r = _g;
	return $r;
}(this));
cosy.Cosy.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cosy.js.map