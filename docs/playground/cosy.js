// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["cosy"] = $hx_exports["cosy"] || {};
$hx_exports["cosy"]["Cosy"] = $hx_exports["cosy"]["Cosy"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var cosy_AstPrinter = function() {
	this.isInClass = false;
	this.indentAmount = 0;
};
cosy_AstPrinter.__name__ = true;
cosy_AstPrinter.prototype = {
	indent: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.indentAmount;
		while(_g1 < _g2) {
			++_g1;
			_g.push("  ");
		}
		return _g.join("");
	}
	,printBlock: function(statements) {
		this.indentAmount++;
		var _g = [];
		var _g1 = 0;
		while(_g1 < statements.length) {
			var stmt = statements[_g1++];
			_g.push(this.indent() + this.printStmt(stmt));
		}
		var s = _g.join("\n");
		this.indentAmount--;
		return "{\n" + s + "\n" + this.indent() + "}";
	}
	,printStmt: function(statement) {
		switch(statement._hx_index) {
		case 0:
			return this.printBlock(statement.statements);
		case 1:
			var _g13 = statement.superclass;
			var declaration = "class " + statement.name.lexeme;
			var declaration1 = _g13 != null ? " < " + this.printExpr(_g13) : "";
			this.isInClass = true;
			var body = this.printBlock(statement.methods);
			this.isInClass = false;
			return "" + (declaration + declaration1) + " " + body;
		case 2:
			return "" + this.printExpr(statement.e);
		case 3:
			var _g6 = statement.name;
			return "for " + (_g6 != null ? _g6.lexeme + " in" : "") + this.printExpr(statement.from) + ".." + this.printExpr(statement.to) + " " + this.printBlock(statement.body);
		case 4:
			return "for " + statement.name.lexeme + " in " + this.printExpr(statement.array) + " " + this.printBlock(statement.body);
		case 5:
			var _g = statement.cond;
			return "for " + (_g != null ? this.printExpr(_g) : "") + " " + this.printBlock(statement.body);
		case 6:
			var _g17 = statement.body;
			var _g16 = statement.params;
			var declaration2 = "" + (this.isInClass ? "" : "fn ") + statement.name.lexeme;
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < _g16.length) _g1.push(this.formatParam(_g16[_g11++]));
			return "" + declaration2 + "(" + _g1.join(", ") + ") " + this.printBlock(_g17);
		case 7:
			var _g4 = statement.el;
			return "if " + this.printExpr(statement.cond) + " " + this.printStmt(statement.then) + (_g4 != null ? " else " + this.printStmt(_g4) : "");
		case 8:
			var _g111 = statement.init;
			return "mut " + statement.name.lexeme + (_g111 != null ? " = " + this.printExpr(_g111) : "");
		case 9:
			return "print " + this.printExpr(statement.e);
		case 10:
			var _g25 = statement.value;
			return "return" + (_g25 != null ? " " + this.printExpr(_g25) : "");
		case 11:
			var _g21 = statement.init;
			return "var " + statement.name.lexeme + (_g21 != null ? " = " + this.printExpr(_g21) : "");
		}
	}
	,printExpr: function(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g5 = expr.exprs;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g5.length) _g.push(this.printExpr(_g5[_g1++]));
			return "[" + _g.join(",") + "]";
		case 1:
			return "" + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 2:
			return "" + this.printExpr(expr.left) + " " + expr.op.lexeme + " " + this.printExpr(expr.right);
		case 3:
			var _g15 = expr.$arguments;
			var tmp = "" + this.printExpr(expr.callee) + "(";
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < _g15.length) _g2.push(this.printExpr(_g15[_g11++]));
			return tmp + _g2.join(", ") + ")";
		case 4:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme;
		case 5:
			return "(" + this.printExpr(expr.e) + ")";
		case 6:
			var _g9 = expr.v;
			if(typeof(_g9) == "string") {
				return "'" + Std.string(_g9) + "'";
			} else {
				return "" + Std.string(_g9);
			}
			break;
		case 7:
			return "" + this.printExpr(expr.left) + " " + (expr.op.type._hx_index == 34 ? "or" : "and") + " " + this.printExpr(expr.right);
		case 8:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 9:
			return "this";
		case 10:
			return "super." + expr.method.lexeme;
		case 11:
			return "" + expr.op.lexeme + this.printExpr(expr.right);
		case 12:
			return expr.name.lexeme;
		case 13:
			var _g21 = expr.body;
			var _g12 = expr.params;
			var _g3 = [];
			var _g13 = 0;
			while(_g13 < _g12.length) _g3.push(this.formatParam(_g12[_g13++]));
			return "fn (" + _g3.join(",") + ") " + this.printStmt(cosy_Stmt.Block(_g21));
		}
	}
	,formatType: function(type) {
		switch(type._hx_index) {
		case 0:
			return "";
		case 2:
			return "Bool";
		case 3:
			return "Num";
		case 4:
			return "Str";
		case 6:
			var _g1 = type.paramTypes;
			var _g = [];
			var _g11 = 0;
			while(_g11 < _g1.length) _g.push(this.formatType(_g1[_g11++]));
			return "Fn(" + _g.join(", ") + ")";
		case 7:
			return StringTools.trim("Array " + this.formatType(type.type));
		default:
			return "" + Std.string(type);
		}
	}
	,formatParam: function(param) {
		var typeStr = this.formatType(param.type);
		return param.name.lexeme + (typeStr != "" ? " " + typeStr : "");
	}
	,__class__: cosy_AstPrinter
};
var cosy_Callable = function() { };
cosy_Callable.__name__ = true;
cosy_Callable.prototype = {
	__class__: cosy_Callable
};
var cosy_Interpreter = function() {
	this.locals = new haxe_ds_ObjectMap();
	this.globals = new cosy_Environment();
	this.globals.define("clock",new cosy__$Interpreter_ClockCallable());
	this.globals.define("random",new cosy__$Interpreter_RandomCallable());
	this.globals.define("str_length",new cosy__$Interpreter_StringLengthCallable());
	this.globals.define("str_charAt",new cosy__$Interpreter_StringCharAtCallable());
	this.globals.define("input",new cosy__$Interpreter_InputCallable());
	this.environment = this.globals;
};
cosy_Interpreter.__name__ = true;
cosy_Interpreter.prototype = {
	interpret: function(statements) {
		try {
			var _g = 0;
			while(_g < statements.length) this.execute(statements[_g++]);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof cosy_RuntimeError)) {
				cosy_Cosy.runtimeError(e1);
			} else {
				throw e;
			}
		}
	}
	,execute: function(statement) {
		switch(statement._hx_index) {
		case 0:
			this.executeBlock(statement.statements,new cosy_Environment(this.environment));
			break;
		case 1:
			var _g14 = statement.methods;
			var _g13 = statement.superclass;
			var _g12 = statement.name;
			var superclass;
			if(_g13 != null) {
				var sc = this.evaluate(_g13);
				if(!((sc) instanceof cosy_Klass)) {
					var this1;
					if(_g13._hx_index == 12) {
						this1 = _g13.name;
					} else {
						throw new js__$Boot_HaxeError("unreachable");
					}
					throw new js__$Boot_HaxeError(new cosy_RuntimeError(this1,"Superclass must be a class"));
				}
				superclass = sc;
			} else {
				superclass = null;
			}
			this.environment.define(_g12.lexeme,null);
			if(superclass != null) {
				this.environment = new cosy_Environment(this.environment);
				this.environment.define("super",superclass);
			}
			var methods = new haxe_ds_StringMap();
			var _g = 0;
			while(_g < _g14.length) {
				var method = _g14[_g];
				++_g;
				if(method._hx_index == 6) {
					var _g1 = method.name;
					var func = new cosy_Function(_g1,method.params,method.body,this.environment,_g1.lexeme == "init");
					var key = _g1.lexeme;
					if(__map_reserved[key] != null) {
						methods.setReserved(key,func);
					} else {
						methods.h[key] = func;
					}
				}
			}
			var klass = new cosy_Klass(_g12.lexeme,superclass,methods);
			if(superclass != null) {
				this.environment = this.environment.enclosing;
			}
			this.environment.assign(_g12,klass);
			break;
		case 2:
			this.evaluate(statement.e);
			break;
		case 3:
			var _g9 = statement.body;
			var _g6 = statement.name;
			var _g5 = statement.keyword;
			var fromVal = this.evaluate(statement.from);
			if(typeof(fromVal) != "number") {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g5),"Number expected in \"from\" clause of loop.");
			}
			var toVal = this.evaluate(statement.to);
			if(typeof(toVal) != "number") {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g5),"Number expected in \"to\" clause of loop.");
			}
			var env = new cosy_Environment(this.environment);
			var _g2 = fromVal;
			var _g11 = toVal;
			while(_g2 < _g11) {
				var counter = _g2++;
				if(_g6 != null) {
					env.define(_g6.lexeme,counter);
				}
				this.executeBlock(_g9,env);
			}
			break;
		case 4:
			var _g28 = statement.body;
			var _g26 = statement.name;
			var arr = this.evaluate(statement.array);
			var env1 = new cosy_Environment(this.environment);
			var _g3 = 0;
			while(_g3 < arr.length) {
				env1.define(_g26.lexeme,arr[_g3++]);
				this.executeBlock(_g28,env1);
			}
			break;
		case 5:
			var _g15 = statement.body;
			var _g4 = statement.cond;
			var env2 = new cosy_Environment(this.environment);
			while(_g4 != null ? this.isTruthy(this.evaluate(_g4)) : true) this.executeBlock(_g15,env2);
			break;
		case 6:
			var _g151 = statement.name;
			this.environment.define(_g151.lexeme,new cosy_Function(_g151,statement.params,statement.body,this.environment,false));
			break;
		case 7:
			var _g41 = statement.el;
			if(this.isTruthy(this.evaluate(statement.cond))) {
				this.execute(statement.then);
			} else if(_g41 != null) {
				this.execute(_g41);
			}
			break;
		case 8:
			var _g111 = statement.init;
			var value = cosy_Interpreter.uninitialized;
			if(_g111 != null) {
				value = this.evaluate(_g111);
			}
			this.environment.define(statement.name.lexeme,value);
			break;
		case 9:
			cosy_Cosy.println(this.stringify(this.evaluate(statement.e)));
			break;
		case 10:
			var _g25 = statement.value;
			throw new js__$Boot_HaxeError(new cosy_Return(_g25 == null ? null : this.evaluate(_g25)));
		case 11:
			var _g21 = statement.init;
			var value1 = cosy_Interpreter.uninitialized;
			if(_g21 != null) {
				value1 = this.evaluate(_g21);
			}
			this.environment.define(statement.name.lexeme,value1);
			break;
		}
	}
	,resolve: function(expr,depth) {
		this.locals.set(expr,depth);
	}
	,executeBlock: function(statements,environment) {
		var previous = this.environment;
		try {
			this.environment = environment;
			var _g = 0;
			while(_g < statements.length) this.execute(statements[_g++]);
			this.environment = previous;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			this.environment = previous;
			throw js__$Boot_HaxeError.wrap(e1);
		}
	}
	,evaluate: function(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g5 = expr.exprs;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g5.length) _g.push(this.evaluate(_g5[_g1++]));
			return _g;
		case 1:
			var _g7 = expr.name;
			var value = this.evaluate(expr.value);
			var _g2 = this.locals.h[expr.__id__];
			if(_g2 == null) {
				this.globals.assign(_g7,value);
			} else {
				this.environment.assignAt(_g2,_g7,value);
			}
			return value;
		case 2:
			var _g19 = expr.op;
			var left = this.evaluate(expr.left);
			var right = this.evaluate(expr.right);
			switch(_g19.type._hx_index) {
			case 9:
				this.checkNumberOperands(_g19,left,right);
				return left - right;
			case 10:
				if(typeof(left) == "number" && typeof(right) == "number") {
					return left + right;
				} else if(typeof(left) == "number" && typeof(right) == "string") {
					return left + right;
				} else if(typeof(left) == "string" && typeof(right) == "number") {
					return left + right;
				} else if(typeof(left) == "string" && typeof(right) == "string") {
					return left + right;
				} else {
					throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g19,"Operands cannot be concatinated."));
				}
				break;
			case 11:
				this.checkNumberOperands(_g19,left,right);
				return left / right;
			case 12:
				this.checkNumberOperands(_g19,left,right);
				return left * right;
			case 15:
				return !this.isEqual(left,right);
			case 17:
				return this.isEqual(left,right);
			case 18:
				this.checkNumberOperands(_g19,left,right);
				return left > right;
			case 19:
				this.checkNumberOperands(_g19,left,right);
				return left >= right;
			case 20:
				this.checkNumberOperands(_g19,left,right);
				return left < right;
			case 21:
				this.checkNumberOperands(_g19,left,right);
				return left <= right;
			default:
				return null;
			}
			break;
		case 3:
			var _g15 = expr.$arguments;
			var _g14 = expr.paren;
			var callee = this.evaluate(expr.callee);
			var f = $bind(this,this.evaluate);
			var result = new Array(_g15.length);
			var _g3 = 0;
			var _g11 = _g15.length;
			while(_g3 < _g11) {
				var i = _g3++;
				result[i] = f(_g15[i]);
			}
			if(!js_Boot.__implements(callee,cosy_Callable)) {
				throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g14,"Can only call functions and classes"));
			} else {
				var func = callee;
				var arity = func.arity();
				if(result.length != arity) {
					throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g14,"Expected " + arity + " argument(s) but got " + result.length + "."));
				}
				return func.call(this,result);
			}
			break;
		case 4:
			var _g17 = expr.name;
			var obj = this.evaluate(expr.obj);
			if(((obj) instanceof Array)) {
				return this.arrayGet(obj,_g17);
			} else if(((obj) instanceof cosy_Instance)) {
				return obj.get(_g17);
			} else {
				throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g17,"Only instances have properties"));
			}
			break;
		case 5:
			return this.evaluate(expr.e);
		case 6:
			return expr.v;
		case 7:
			var _g28 = expr.right;
			var left1 = this.evaluate(expr.left);
			switch(expr.op.type._hx_index) {
			case 25:
				if(!this.isTruthy(left1)) {
					return left1;
				} else {
					return this.evaluate(_g28);
				}
				break;
			case 34:
				if(this.isTruthy(left1)) {
					return left1;
				} else {
					return this.evaluate(_g28);
				}
				break;
			default:
				return this.evaluate(_g28);
			}
			break;
		case 8:
			var _g22 = expr.name;
			var obj1 = this.evaluate(expr.obj);
			if(!((obj1) instanceof cosy_Instance)) {
				throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g22,"Only instances have fields"));
			}
			var value1 = this.evaluate(expr.value);
			obj1.set(_g22,value1);
			return value1;
		case 9:
			return this.lookUpVariable(expr.keyword,expr);
		case 10:
			var _g25 = expr.method;
			var distance = this.locals.h[expr.__id__];
			var superclass = this.environment.getAt(distance,"super");
			var obj2 = this.environment.getAt(distance - 1,"this");
			var method = superclass.findMethod(_g25.lexeme);
			if(method == null) {
				throw new js__$Boot_HaxeError(new cosy_RuntimeError(_g25,"Undefined property \"" + _g25.lexeme + "\"."));
			}
			return method.bind(obj2);
		case 11:
			var _g10 = expr.op;
			var right1 = this.evaluate(expr.right);
			switch(_g10.type._hx_index) {
			case 9:
				this.checkNumberOperand(_g10,right1);
				return -right1;
			case 14:
				return !this.isTruthy(right1);
			default:
				return null;
			}
			break;
		case 12:
			return this.lookUpVariable(expr.name,expr);
		case 13:
			return new cosy_Function(null,expr.params,expr.body,this.environment,false);
		}
	}
	,arrayGet: function(array,name) {
		switch(name.lexeme) {
		case "concat":
			return new cosy__$Interpreter_ArrayCallable(1,function(args) {
				var _this = args[0];
				var f = $bind(array,$arrayPush);
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(_this[i]);
				}
				return result;
			});
		case "get":
			return new cosy__$Interpreter_ArrayCallable(1,function(args1) {
				return array[args1[0]];
			});
		case "length":
			return array.length;
		case "pop":
			return new cosy__$Interpreter_ArrayCallable(0,function(_) {
				return array.pop();
			});
		case "push":
			return new cosy__$Interpreter_ArrayCallable(1,function(args2) {
				var f1 = $bind(array,$arrayPush);
				var result1 = new Array(args2.length);
				var _g2 = 0;
				var _g11 = args2.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					result1[i1] = f1(args2[i1]);
				}
				return result1;
			});
		default:
			throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Undefined method \"" + name.lexeme + "\"."));
		}
	}
	,lookUpVariable: function(name,expr) {
		var _g = this.locals.h[expr.__id__];
		var value = _g == null ? this.globals.get(name) : this.environment.getAt(_g,name.lexeme);
		if(value == cosy_Interpreter.uninitialized) {
			throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Accessing uninitialized variable \"" + name.lexeme + "\"."));
		}
		return value;
	}
	,isTruthy: function(v) {
		if(v == null) {
			return false;
		}
		if(typeof(v) == "boolean") {
			return v;
		}
		return true;
	}
	,isEqual: function(a,b) {
		if(a == null && b == null) {
			return true;
		}
		if(a == null) {
			return false;
		}
		return a == b;
	}
	,checkNumberOperand: function(op,operand) {
		if(typeof(operand) == "number") {
			return;
		}
		throw new js__$Boot_HaxeError(new cosy_RuntimeError(op,"Operand must be a number"));
	}
	,checkNumberOperands: function(op,left,right) {
		if(typeof(left) == "number" && typeof(right) == "number") {
			return;
		}
		throw new js__$Boot_HaxeError(new cosy_RuntimeError(op,"Operand must be a number"));
	}
	,stringify: function(v) {
		if(v == null) {
			return "nil";
		}
		return Std.string(v);
	}
	,__class__: cosy_Interpreter
};
var cosy_Environment = function(enclosing) {
	this.values = new haxe_ds_StringMap();
	this.enclosing = enclosing;
};
cosy_Environment.__name__ = true;
cosy_Environment.prototype = {
	define: function(name,value) {
		var _this = this.values;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,get: function(name) {
		var key = name.lexeme;
		var _this = this.values;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.values;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		if(this.enclosing != null) {
			return this.enclosing.get(name);
		}
		throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Undefined variable \"" + name.lexeme + "\"."));
	}
	,getAt: function(distance,name) {
		var _this = this.ancestor(distance).values;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,assign: function(name,value) {
		var key = name.lexeme;
		var _this = this.values;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.values;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		} else if(this.enclosing != null) {
			this.enclosing.assign(name,value);
		} else {
			throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Undefined variable \"" + name.lexeme + "\"."));
		}
	}
	,assignAt: function(distance,name,value) {
		var key = name.lexeme;
		var _this = this.ancestor(distance).values;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		return;
	}
	,ancestor: function(distance) {
		var env = this;
		var _g = 0;
		while(_g < distance) {
			++_g;
			env = env.enclosing;
		}
		return env;
	}
	,__class__: cosy_Environment
};
var cosy__$Interpreter_ClockCallable = function() {
};
cosy__$Interpreter_ClockCallable.__name__ = true;
cosy__$Interpreter_ClockCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_ClockCallable.prototype = {
	arity: function() {
		return 0;
	}
	,call: function(interpreter,args) {
		return Date.now() / 1000 * 1000;
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_ClockCallable
};
var cosy__$Interpreter_RandomCallable = function() {
};
cosy__$Interpreter_RandomCallable.__name__ = true;
cosy__$Interpreter_RandomCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_RandomCallable.prototype = {
	arity: function() {
		return 0;
	}
	,call: function(interpreter,args) {
		return Math.random();
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_RandomCallable
};
var cosy__$Interpreter_StringLengthCallable = function() {
};
cosy__$Interpreter_StringLengthCallable.__name__ = true;
cosy__$Interpreter_StringLengthCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_StringLengthCallable.prototype = {
	arity: function() {
		return 1;
	}
	,call: function(interpreter,args) {
		return args[0].length;
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_StringLengthCallable
};
var cosy__$Interpreter_StringCharAtCallable = function() {
};
cosy__$Interpreter_StringCharAtCallable.__name__ = true;
cosy__$Interpreter_StringCharAtCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_StringCharAtCallable.prototype = {
	arity: function() {
		return 2;
	}
	,call: function(interpreter,args) {
		return args[0].charAt(args[1]);
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_StringCharAtCallable
};
var cosy__$Interpreter_InputCallable = function() {
};
cosy__$Interpreter_InputCallable.__name__ = true;
cosy__$Interpreter_InputCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_InputCallable.prototype = {
	arity: function() {
		return 0;
	}
	,call: function(interpreter,args) {
		throw new js__$Boot_HaxeError("Not implemented on this platform!");
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_InputCallable
};
var cosy_Cosy = function() { };
cosy_Cosy.__name__ = true;
cosy_Cosy.main = function() {
};
cosy_Cosy.println = function(v) {
	if(cosy_Cosy.testing) {
		cosy_Cosy.testOutput += Std.string(v) + "\n";
	} else {
		window.console.log(v);
	}
};
cosy_Cosy.validate = $hx_exports["cosy"]["Cosy"]["validate"] = function(source) {
	cosy_Cosy.hadError = false;
	var statements = new cosy_Parser(new cosy_Scanner(source).scanTokens()).parse();
	if(cosy_Cosy.hadError) {
		return;
	}
	var resolver = new cosy_Resolver(cosy_Cosy.interpreter);
	resolver.beginScope();
	resolver.resolveStmts(statements);
	resolver.endScope();
	new cosy_Typer().typeStmts(statements);
	if(cosy_Cosy.hadError) {
		return;
	}
};
cosy_Cosy.run = $hx_exports["cosy"]["Cosy"]["run"] = function(source) {
	cosy_Cosy.hadError = false;
	var statements = new cosy_Parser(new cosy_Scanner(source).scanTokens()).parse();
	if(cosy_Cosy.hadError) {
		return;
	}
	var resolver = new cosy_Resolver(cosy_Cosy.interpreter);
	resolver.beginScope();
	resolver.resolveStmts(statements);
	resolver.endScope();
	new cosy_Typer().typeStmts(statements);
	if(cosy_Cosy.hadError) {
		return;
	}
	statements = new cosy_Optimizer().optimizeStmts(statements);
	if(cosy_Cosy.prettyPrint) {
		var printer = new cosy_AstPrinter();
		var _g = 0;
		while(_g < statements.length) cosy_Cosy.println(printer.printStmt(statements[_g++]));
		return;
	}
	if(cosy_Cosy.javascript) {
		cosy_Cosy.println("// standard library\nlet clock = Date.now;\n");
		var printer1 = new cosy_JavaScriptPrinter();
		var _g1 = 0;
		while(_g1 < statements.length) cosy_Cosy.println(printer1.printStmt(statements[_g1++]));
		return;
	}
	cosy_Cosy.interpreter.interpret(statements);
};
cosy_Cosy.reportWarning = function(line,where,message) {
	cosy_Cosy.println("[line " + line + "] Warning " + where + ": " + message);
};
cosy_Cosy.warning = function(data,message) {
	switch(data._hx_index) {
	case 0:
		cosy_Cosy.reportWarning(data.v,"",message);
		break;
	case 1:
		var _g = data.v;
		if(_g.type == cosy_TokenType.Eof) {
			cosy_Cosy.reportWarning(_g.line,"at end",message);
		} else {
			cosy_Cosy.reportWarning(_g.line,"at \"" + _g.lexeme + "\"",message);
		}
		break;
	}
};
cosy_Cosy.report = function(line,where,message) {
	cosy_Cosy.println("[line " + line + "] Error " + where + ": " + message);
	cosy_Cosy.hadError = true;
};
cosy_Cosy.error = function(data,message) {
	switch(data._hx_index) {
	case 0:
		cosy_Cosy.report(data.v,"",message);
		break;
	case 1:
		var _g = data.v;
		if(_g.type == cosy_TokenType.Eof) {
			cosy_Cosy.report(_g.line,"at end",message);
		} else {
			cosy_Cosy.report(_g.line,"at \"" + _g.lexeme + "\"",message);
		}
		break;
	}
};
cosy_Cosy.runtimeError = function(e) {
	cosy_Cosy.println("[line " + e.token.line + "] Runtime Error: " + e.message);
	cosy_Cosy.hadRuntimeError = true;
};
var cosy_ErrorDataType = $hxEnums["cosy.ErrorDataType"] = { __ename__ : true, __constructs__ : ["Line","Token"]
	,Line: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"cosy.ErrorDataType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Token: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"cosy.ErrorDataType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var cosy_Error = function(message) {
	this.message = message;
};
cosy_Error.__name__ = true;
cosy_Error.prototype = {
	__class__: cosy_Error
};
var cosy_Expr = $hxEnums["cosy.Expr"] = { __ename__ : true, __constructs__ : ["ArrayLiteral","Assign","Binary","Call","Get","Grouping","Literal","Logical","Set","This","Super","Unary","Variable","AnonFunction"]
	,ArrayLiteral: ($_=function(keyword,exprs) { return {_hx_index:0,keyword:keyword,exprs:exprs,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword","exprs"],$_)
	,Assign: ($_=function(name,value) { return {_hx_index:1,name:name,value:value,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["name","value"],$_)
	,Binary: ($_=function(left,op,right) { return {_hx_index:2,left:left,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["left","op","right"],$_)
	,Call: ($_=function(callee,paren,$arguments) { return {_hx_index:3,callee:callee,paren:paren,$arguments:$arguments,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["callee","paren","$arguments"],$_)
	,Get: ($_=function(obj,name) { return {_hx_index:4,obj:obj,name:name,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["obj","name"],$_)
	,Grouping: ($_=function(e) { return {_hx_index:5,e:e,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Literal: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Logical: ($_=function(left,op,right) { return {_hx_index:7,left:left,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["left","op","right"],$_)
	,Set: ($_=function(obj,name,value) { return {_hx_index:8,obj:obj,name:name,value:value,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["obj","name","value"],$_)
	,This: ($_=function(keyword) { return {_hx_index:9,keyword:keyword,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword"],$_)
	,Super: ($_=function(keyword,method) { return {_hx_index:10,keyword:keyword,method:method,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["keyword","method"],$_)
	,Unary: ($_=function(op,right) { return {_hx_index:11,op:op,right:right,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["op","right"],$_)
	,Variable: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["name"],$_)
	,AnonFunction: ($_=function(params,body,returnType) { return {_hx_index:13,params:params,body:body,returnType:returnType,__enum__:"cosy.Expr",toString:$estr}; },$_.__params__ = ["params","body","returnType"],$_)
};
var cosy_Function = function(name,params,body,closure,isInitializer) {
	this.name = name;
	this.params = params;
	this.body = body;
	this.closure = closure;
	this.isInitializer = isInitializer;
};
cosy_Function.__name__ = true;
cosy_Function.__interfaces__ = [cosy_Callable];
cosy_Function.prototype = {
	arity: function() {
		return this.params.length;
	}
	,call: function(interpreter,args) {
		var environment = new cosy_Environment(this.closure);
		var _g = 0;
		var _g1 = this.params.length;
		while(_g < _g1) {
			var i = _g++;
			environment.define(this.params[i].name.lexeme,args[i]);
		}
		try {
			interpreter.executeBlock(this.body,environment);
		} catch( ret ) {
			var ret1 = ((ret) instanceof js__$Boot_HaxeError) ? ret.val : ret;
			if(((ret1) instanceof cosy_Return)) {
				if(!this.isInitializer) {
					return ret1.value;
				}
			} else {
				throw ret;
			}
		}
		if(this.isInitializer) {
			return this.closure.getAt(0,"this");
		} else {
			return null;
		}
	}
	,bind: function(instance) {
		var env = new cosy_Environment(this.closure);
		env.define("this",instance);
		return new cosy_Function(this.name,this.params,this.body,env,this.isInitializer);
	}
	,toString: function() {
		if(this.name != null) {
			return "<fn " + this.name.lexeme + ">";
		} else {
			return "<fn>";
		}
	}
	,__class__: cosy_Function
};
var cosy_Instance = function(klass) {
	this.fields = new haxe_ds_StringMap();
	this.klass = klass;
};
cosy_Instance.__name__ = true;
cosy_Instance.prototype = {
	get: function(name) {
		var key = name.lexeme;
		var _this = this.fields;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = name.lexeme;
			var _this1 = this.fields;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		var method = this.klass.findMethod(name.lexeme);
		if(method != null) {
			return method.bind(this);
		}
		throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Undefined property \"" + name.lexeme + "\"."));
	}
	,set: function(name,value) {
		var key = name.lexeme;
		var _this = this.fields;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,__class__: cosy_Instance
};
var cosy__$Interpreter_ArrayCallable = function(arityValue,method) {
	this.arityValue = arityValue;
	this.method = method;
};
cosy__$Interpreter_ArrayCallable.__name__ = true;
cosy__$Interpreter_ArrayCallable.__interfaces__ = [cosy_Callable];
cosy__$Interpreter_ArrayCallable.prototype = {
	arity: function() {
		return this.arityValue;
	}
	,call: function(interpreter,args) {
		return this.method(args);
	}
	,toString: function() {
		return "<native fn>";
	}
	,__class__: cosy__$Interpreter_ArrayCallable
};
var cosy_JavaScriptPrinter = function() {
	this.classNames = [];
	this.isInClass = false;
	this.indentAmount = 0;
};
cosy_JavaScriptPrinter.__name__ = true;
cosy_JavaScriptPrinter.prototype = {
	indent: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.indentAmount;
		while(_g1 < _g2) {
			++_g1;
			_g.push("  ");
		}
		return _g.join("");
	}
	,printBlock: function(statements) {
		this.indentAmount++;
		var _g = [];
		var _g1 = 0;
		while(_g1 < statements.length) {
			var stmt = statements[_g1++];
			_g.push(this.indent() + this.printStmt(stmt));
		}
		var s = _g.join("\n");
		this.indentAmount--;
		return "{\n" + s + "\n" + this.indent() + "}";
	}
	,printStmt: function(statement) {
		switch(statement._hx_index) {
		case 0:
			return this.printBlock(statement.statements);
		case 1:
			var _g13 = statement.superclass;
			var className = statement.name.lexeme;
			this.classNames.push(className);
			var declaration = _g13 != null ? " extends " + this.printExpr(_g13) : "";
			this.isInClass = true;
			var body = this.printBlock(statement.methods);
			this.isInClass = false;
			return "" + ("class " + className + declaration) + " " + body;
		case 2:
			return "" + this.printExpr(statement.e) + ";";
		case 3:
			var _g6 = statement.name;
			var counter = _g6 != null ? _g6.lexeme : "__i";
			return "for (var " + counter + " = " + this.printExpr(statement.from) + "; " + counter + " < " + this.printExpr(statement.to) + "; " + counter + "++) " + this.printBlock(statement.body);
		case 4:
			return "for (" + statement.name.lexeme + " of " + this.printExpr(statement.array) + ") " + this.printBlock(statement.body);
		case 5:
			var _g = statement.cond;
			return "while (" + (_g != null ? this.printExpr(_g) : "true") + ") " + this.printBlock(statement.body);
		case 6:
			var _g17 = statement.body;
			var _g16 = statement.params;
			var declaration1 = "" + (this.isInClass ? "" : "function ") + statement.name.lexeme;
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < _g16.length) _g1.push(_g16[_g11++].name.lexeme);
			return "" + declaration1 + "(" + _g1.join(",") + ") " + this.printStmt(cosy_Stmt.Block(_g17));
		case 7:
			var _g4 = statement.el;
			return "if (" + this.printExpr(statement.cond) + ") " + this.printStmt(statement.then) + (_g4 != null ? " else " + this.printStmt(_g4) : "");
		case 8:
			var _g111 = statement.init;
			return "var " + statement.name.lexeme + (_g111 != null ? " = " + this.printExpr(_g111) : "") + ";";
		case 9:
			return "console.log(" + this.printExpr(statement.e) + ");";
		case 10:
			var _g25 = statement.value;
			return "return" + (_g25 != null ? " " + this.printExpr(_g25) : "") + ";";
		case 11:
			var _g21 = statement.init;
			return "const " + statement.name.lexeme + (_g21 != null ? " = " + this.printExpr(_g21) : "") + ";";
		}
	}
	,printExpr: function(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g5 = expr.exprs;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _g5.length) _g.push(this.printExpr(_g5[_g1++]));
			return "[" + _g.join(",") + "]";
		case 1:
			return "" + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 2:
			var _g19 = expr.op;
			return "" + this.printExpr(expr.left) + " " + (_g19.type._hx_index == 17 ? "===" : _g19.lexeme) + " " + this.printExpr(expr.right);
		case 3:
			var _g15 = expr.$arguments;
			var calleeName = this.printExpr(expr.callee);
			var tmp = this.classNames.indexOf(calleeName) != -1 ? "new " : "";
			var tmp1 = "" + calleeName + "(";
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < _g15.length) _g2.push(this.printExpr(_g15[_g11++]));
			return tmp + (tmp1 + _g2.join(",") + ")");
		case 4:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme;
		case 5:
			return "(" + this.printExpr(expr.e) + ")";
		case 6:
			var _g9 = expr.v;
			if(_g9 == null) {
				return "null";
			} else if(typeof(_g9) == "string") {
				return "\"" + Std.string(_g9) + "\"";
			} else {
				return "" + Std.string(_g9);
			}
			break;
		case 7:
			return "" + this.printExpr(expr.left) + " " + (expr.op.type._hx_index == 34 ? "||" : "&&") + " " + this.printExpr(expr.right);
		case 8:
			return "" + this.printExpr(expr.obj) + "." + expr.name.lexeme + " = " + this.printExpr(expr.value);
		case 9:
			return "this";
		case 10:
			return "super." + expr.method.lexeme;
		case 11:
			return "" + expr.op.lexeme + this.printExpr(expr.right);
		case 12:
			return expr.name.lexeme;
		case 13:
			var _g21 = expr.body;
			var _g12 = expr.params;
			var _g3 = [];
			var _g13 = 0;
			while(_g13 < _g12.length) _g3.push(_g12[_g13++].name.lexeme);
			return "function (" + _g3.join(",") + ") " + this.printStmt(cosy_Stmt.Block(_g21));
		}
	}
	,__class__: cosy_JavaScriptPrinter
};
var cosy_Klass = function(name,superclass,methods) {
	this.name = name;
	this.superclass = superclass;
	this.methods = methods;
};
cosy_Klass.__name__ = true;
cosy_Klass.__interfaces__ = [cosy_Callable];
cosy_Klass.prototype = {
	arity: function() {
		var _g = this.findMethod("init");
		if(_g == null) {
			return 0;
		} else {
			return _g.arity();
		}
	}
	,call: function(interpreter,args) {
		var instance = new cosy_Instance(this);
		var _g = this.findMethod("init");
		if(_g != null) {
			_g.bind(instance).call(interpreter,args);
		}
		return instance;
	}
	,findMethod: function(name) {
		var _this = this.methods;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.methods;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		if(this.superclass != null) {
			return this.superclass.findMethod(name);
		}
		return null;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: cosy_Klass
};
var cosy_Optimizer = function() {
};
cosy_Optimizer.__name__ = true;
cosy_Optimizer.prototype = {
	optimizeStmts: function(stmts) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < stmts.length) _g.push(this.optimizeStmt(stmts[_g1++]));
		return _g;
	}
	,optimizeStmt: function(stmt) {
		switch(stmt._hx_index) {
		case 0:
			return cosy_Stmt.Block(this.optimizeStmts(stmt.statements));
		case 2:
			return cosy_Stmt.Expression(this.optimizeExpr(stmt.e));
		case 7:
			var _g2 = stmt.el;
			return cosy_Stmt.If(this.optimizeExpr(stmt.cond),this.optimizeStmt(stmt.then),_g2 != null ? this.optimizeStmt(_g2) : null);
		case 8:
			var _g4 = stmt.init;
			return cosy_Stmt.Mut(stmt.name,_g4 != null ? this.optimizeExpr(_g4) : _g4);
		case 9:
			return cosy_Stmt.Print(this.optimizeExpr(stmt.e));
		case 10:
			var _g11 = stmt.value;
			return cosy_Stmt.Return(stmt.keyword,_g11 != null ? this.optimizeExpr(_g11) : null);
		case 11:
			var _g7 = stmt.init;
			return cosy_Stmt.Var(stmt.name,_g7 != null ? this.optimizeExpr(_g7) : _g7);
		default:
			return stmt;
		}
	}
	,optimizeExpr: function(expr) {
		if(expr._hx_index == 2) {
			var _g1 = expr.op;
			var l = this.optimizeExpr(expr.left);
			var r = this.optimizeExpr(expr.right);
			if(l._hx_index == 6) {
				var _g = l.v;
				if(r._hx_index == 6) {
					var _g11 = r.v;
					if(typeof(_g) == "number" && typeof(_g11) == "number") {
						var tmp;
						switch(_g1.type._hx_index) {
						case 9:
							tmp = _g - _g11;
							break;
						case 10:
							tmp = _g + _g11;
							break;
						case 11:
							tmp = _g / _g11;
							break;
						case 12:
							tmp = _g * _g11;
							break;
						default:
							cosy_Cosy.error(cosy_ErrorDataType.Token(_g1),"Invalid operator.");
							return cosy_Expr.Binary(l,_g1,r);
						}
						return cosy_Expr.Literal(tmp);
					} else if(typeof(_g) == "string" && typeof(_g11) == "string") {
						return cosy_Expr.Literal(_g + _g11);
					} else {
						return cosy_Expr.Binary(l,_g1,r);
					}
				} else {
					return cosy_Expr.Binary(l,_g1,r);
				}
			} else {
				return cosy_Expr.Binary(l,_g1,r);
			}
		} else {
			return expr;
		}
	}
	,__class__: cosy_Optimizer
};
var cosy_Parser = function(tokens) {
	this.current = 0;
	this.tokens = tokens;
};
cosy_Parser.__name__ = true;
cosy_Parser.prototype = {
	parse: function() {
		var statements = [];
		while(!this.isAtEnd()) statements.push(this.declaration());
		return statements;
	}
	,expression: function() {
		return this.assignment();
	}
	,declaration: function() {
		try {
			if(this.match([cosy_TokenType.Class])) {
				return this.classDeclaration();
			}
			if(this.match([cosy_TokenType.Fn])) {
				return this.func("function");
			}
			if(this.match([cosy_TokenType.Var])) {
				return this.varDeclaration();
			}
			if(this.match([cosy_TokenType.Mut])) {
				return this.mutDeclaration();
			}
			return this.statement();
		} catch( e ) {
			if(((((e) instanceof js__$Boot_HaxeError) ? e.val : e) instanceof cosy__$Parser_ParseError)) {
				this.synchronize();
				return null;
			} else {
				throw e;
			}
		}
	}
	,statement: function() {
		if(this.match([cosy_TokenType.For])) {
			return this.forStatement();
		}
		if(this.match([cosy_TokenType.If])) {
			return this.ifStatement();
		}
		if(this.match([cosy_TokenType.Print])) {
			return this.printStatement();
		}
		if(this.match([cosy_TokenType.Return])) {
			return this.returnStatement();
		}
		if(this.match([cosy_TokenType.LeftBrace])) {
			return cosy_Stmt.Block(this.block());
		}
		return this.expressionStatement();
	}
	,forStatement: function() {
		if(this.checkUntil(cosy_TokenType.DotDot,cosy_TokenType.LeftBrace)) {
			var keyword = this.previous();
			var name = null;
			if(this.check(cosy_TokenType.Identifier)) {
				name = this.consume(cosy_TokenType.Identifier,"Expect variable name.");
				if(StringTools.startsWith(name.lexeme,"_")) {
					this.error(name,"Loop counters cannot be marked as unused. Use `for min...max` syntax instead.");
				}
				this.consume(cosy_TokenType.In,"Expect \"in\" after for loop identifier.");
			}
			var from = this.expression();
			this.consume(cosy_TokenType.DotDot,"Expect \"..\" between from and to numbers.");
			var to = this.expression();
			this.consume(cosy_TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy_Stmt.For(keyword,name,from,to,this.block());
		} else if(this.checkUntil(cosy_TokenType.In,cosy_TokenType.LeftBrace)) {
			var name1 = this.consume(cosy_TokenType.Identifier,"Expect variable name.");
			this.consume(cosy_TokenType.In,"Expect \"in\" after for loop identifier.");
			var array = this.expression();
			this.consume(cosy_TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy_Stmt.ForArray(name1,array,this.block());
		} else {
			var condition = this.check(cosy_TokenType.LeftBrace) ? null : this.expression();
			this.consume(cosy_TokenType.LeftBrace,"Expect \"{\" before loop body.");
			return cosy_Stmt.ForCondition(condition,this.block());
		}
	}
	,ifStatement: function() {
		return cosy_Stmt.If(this.expression(),this.statement(),this.match([cosy_TokenType.Else]) ? this.statement() : null);
	}
	,printStatement: function() {
		return cosy_Stmt.Print(this.expression());
	}
	,returnStatement: function() {
		return cosy_Stmt.Return(this.previous(),this.match([cosy_TokenType.Underscore]) ? null : this.expression());
	}
	,expressionStatement: function() {
		return cosy_Stmt.Expression(this.expression());
	}
	,block: function() {
		var statements = [];
		while(!this.check(cosy_TokenType.RightBrace) && !this.isAtEnd()) statements.push(this.declaration());
		this.consume(cosy_TokenType.RightBrace,"Expect \"}\" after block.");
		return statements;
	}
	,varDeclaration: function() {
		var name = this.consume(cosy_TokenType.Identifier,"Expect variable name.");
		var initializer = null;
		if(this.match([cosy_TokenType.Equal])) {
			initializer = this.expression();
		}
		return cosy_Stmt.Var(name,initializer);
	}
	,mutDeclaration: function() {
		var name = this.consume(cosy_TokenType.Identifier,"Expect variable name.");
		var initializer = null;
		if(this.match([cosy_TokenType.Equal])) {
			initializer = this.expression();
		}
		return cosy_Stmt.Mut(name,initializer);
	}
	,classDeclaration: function() {
		var name = this.consume(cosy_TokenType.Identifier,"Expect class name");
		var superclass;
		if(this.match([cosy_TokenType.Less])) {
			this.consume(cosy_TokenType.Identifier,"Expect superclass name");
			superclass = cosy_Expr.Variable(this.previous());
		} else {
			superclass = null;
		}
		this.consume(cosy_TokenType.LeftBrace,"Expect \"{\" before class body.");
		var methods = [];
		while(!this.check(cosy_TokenType.RightBrace) && !this.isAtEnd()) methods.push(this.func("method"));
		this.consume(cosy_TokenType.RightBrace,"Expect \"}\" after class body.");
		return cosy_Stmt.Class(name,superclass,methods);
	}
	,func: function(kind) {
		var name = this.consume(cosy_TokenType.Identifier,"Expect " + kind + " name.");
		var functionExpr = this.funcBody(kind);
		if(functionExpr._hx_index == 13) {
			return cosy_Stmt.Function(name,functionExpr.params,functionExpr.body,functionExpr.returnType);
		} else {
			throw new js__$Boot_HaxeError(new cosy_RuntimeError(name,"Invalid function declaration."));
		}
	}
	,paramType: function() {
		if(this.match([cosy_TokenType.BooleanType])) {
			return cosy_VariableType.Boolean;
		} else if(this.match([cosy_TokenType.NumberType])) {
			return cosy_VariableType.Number;
		} else if(this.match([cosy_TokenType.StringType])) {
			return cosy_VariableType.Text;
		} else if(this.match([cosy_TokenType.FunctionType])) {
			this.consume(cosy_TokenType.LeftParen,"Expect \"(\" after Fun.");
			var funcParamTypes = [];
			while(!this.check(cosy_TokenType.RightParen)) {
				funcParamTypes.push(this.paramType());
				if(!this.match([cosy_TokenType.Comma])) {
					break;
				}
			}
			this.consume(cosy_TokenType.RightParen,"Expect \")\" after parameters.");
			var returnType = this.paramType();
			if(returnType._hx_index == 0) {
				returnType = cosy_VariableType.Void;
			}
			return cosy_VariableType.Function(funcParamTypes,returnType);
		} else if(this.match([cosy_TokenType.ArrayType])) {
			return cosy_VariableType.Array(this.paramType());
		} else {
			return cosy_VariableType.Unknown;
		}
	}
	,funcBody: function(kind) {
		this.consume(cosy_TokenType.LeftParen,"Expect \"(\" after " + kind + " name.");
		var params = [];
		if(!this.check(cosy_TokenType.RightParen)) {
			while(true) {
				if(params.length >= 255) {
					this.error(this.peek(),"Cannot have more than 255 parameters.");
				}
				params.push({ name : this.consume(cosy_TokenType.Identifier,"Expect parameter name."), type : this.paramType()});
				if(!this.match([cosy_TokenType.Comma])) {
					break;
				}
			}
		}
		this.consume(cosy_TokenType.RightParen,"Expect \")\" after parameters.");
		var returnType = this.paramType();
		this.consume(cosy_TokenType.LeftBrace,"Expect \"{\" before " + kind + " body");
		return cosy_Expr.AnonFunction(params,this.block(),returnType);
	}
	,assignment: function() {
		var expr = this.or();
		if(this.match([cosy_TokenType.Equal])) {
			var equals = this.previous();
			var value = this.assignment();
			switch(expr._hx_index) {
			case 4:
				return cosy_Expr.Set(expr.obj,expr.name,value);
			case 12:
				return cosy_Expr.Assign(expr.name,value);
			default:
			}
			this.error(equals,"Invalid assignment target.");
		}
		return expr;
	}
	,or: function() {
		var expr = this.and();
		while(this.match([cosy_TokenType.Or])) expr = cosy_Expr.Logical(expr,this.previous(),this.and());
		return expr;
	}
	,and: function() {
		var expr = this.equality();
		while(this.match([cosy_TokenType.And])) expr = cosy_Expr.Logical(expr,this.previous(),this.equality());
		return expr;
	}
	,equality: function() {
		var expr = this.comparison();
		while(this.match([cosy_TokenType.BangEqual,cosy_TokenType.EqualEqual])) expr = cosy_Expr.Binary(expr,this.previous(),this.comparison());
		return expr;
	}
	,comparison: function() {
		var expr = this.addition();
		while(this.match([cosy_TokenType.Greater,cosy_TokenType.GreaterEqual,cosy_TokenType.Less,cosy_TokenType.LessEqual])) expr = cosy_Expr.Binary(expr,this.previous(),this.addition());
		return expr;
	}
	,addition: function() {
		var expr = this.multiplication();
		while(this.match([cosy_TokenType.Minus,cosy_TokenType.Plus])) expr = cosy_Expr.Binary(expr,this.previous(),this.multiplication());
		return expr;
	}
	,multiplication: function() {
		var expr = this.unary();
		while(this.match([cosy_TokenType.Star,cosy_TokenType.Slash])) expr = cosy_Expr.Binary(expr,this.previous(),this.multiplication());
		return expr;
	}
	,unary: function() {
		if(this.match([cosy_TokenType.Bang,cosy_TokenType.Minus])) {
			return cosy_Expr.Unary(this.previous(),this.unary());
		} else {
			return this.call();
		}
	}
	,call: function() {
		var expr = this.primary();
		while(true) if(this.match([cosy_TokenType.LeftParen])) {
			expr = this.finishCall(expr);
		} else if(this.match([cosy_TokenType.Dot])) {
			expr = cosy_Expr.Get(expr,this.consume(cosy_TokenType.Identifier,"Expect property name after \".\"."));
		} else {
			break;
		}
		return expr;
	}
	,finishCall: function(callee) {
		var args = [];
		if(!this.check(cosy_TokenType.RightParen)) {
			while(true) {
				if(args.length >= 255) {
					this.error(this.peek(),"Cannot have more than 255 arguments");
				}
				args.push(this.expression());
				if(!this.match([cosy_TokenType.Comma])) {
					break;
				}
			}
		}
		return cosy_Expr.Call(callee,this.consume(cosy_TokenType.RightParen,"Expect \")\" after arguments."),args);
	}
	,primary: function() {
		if(this.match([cosy_TokenType.False])) {
			return cosy_Expr.Literal(false);
		}
		if(this.match([cosy_TokenType.True])) {
			return cosy_Expr.Literal(true);
		}
		if(this.match([cosy_TokenType.Number,cosy_TokenType.String])) {
			return cosy_Expr.Literal(this.previous().literal);
		}
		if(this.match([cosy_TokenType.Super])) {
			var keyword = this.previous();
			this.consume(cosy_TokenType.Dot,"Expect \".\" after \"super\".");
			return cosy_Expr.Super(keyword,this.consume(cosy_TokenType.Identifier,"Expect superclass method name."));
		}
		if(this.match([cosy_TokenType.This])) {
			return cosy_Expr.This(this.previous());
		}
		if(this.match([cosy_TokenType.Identifier])) {
			return cosy_Expr.Variable(this.previous());
		}
		if(this.match([cosy_TokenType.Fn])) {
			return this.funcBody("function");
		}
		if(this.match([cosy_TokenType.LeftParen])) {
			var expr = this.expression();
			this.consume(cosy_TokenType.RightParen,"Expect \")\" after expression.");
			return cosy_Expr.Grouping(expr);
		}
		if(this.match([cosy_TokenType.LeftBracket])) {
			return this.arrayLiteral();
		}
		throw new js__$Boot_HaxeError(this.error(this.peek(),"Expect expression."));
	}
	,arrayLiteral: function() {
		var keyword = this.previous();
		var exprs = [];
		while(!this.check(cosy_TokenType.RightBracket) && !this.isAtEnd()) {
			exprs.push(this.expression());
			if(!this.check(cosy_TokenType.RightBracket)) {
				this.consume(cosy_TokenType.Comma,"Expect \",\" between array values.");
			}
		}
		this.consume(cosy_TokenType.RightBracket,"Expect \"]\" after array literal.");
		return cosy_Expr.ArrayLiteral(keyword,exprs);
	}
	,consume: function(type,message) {
		if(this.check(type)) {
			return this.advance();
		}
		throw new js__$Boot_HaxeError(this.error(this.peek(),message));
	}
	,match: function(types) {
		var _g = 0;
		while(_g < types.length) if(this.check(types[_g++])) {
			this.advance();
			return true;
		}
		return false;
	}
	,check: function(type) {
		if(this.isAtEnd()) {
			return false;
		}
		return this.peek().type == type;
	}
	,checkUntil: function(type,until) {
		var cur = this.current;
		while(true) {
			if(this.tokens[cur].type == type) {
				return true;
			}
			++cur;
			if(!(this.tokens[cur].type != until && this.tokens[cur].type != cosy_TokenType.Eof)) {
				break;
			}
		}
		return false;
	}
	,advance: function() {
		if(!this.isAtEnd()) {
			this.current++;
		}
		return this.previous();
	}
	,isAtEnd: function() {
		return this.peek().type == cosy_TokenType.Eof;
	}
	,peek: function() {
		return this.tokens[this.current];
	}
	,previous: function() {
		return this.tokens[this.current - 1];
	}
	,error: function(token,message) {
		cosy_Cosy.error(cosy_ErrorDataType.Token(token),message);
		return new cosy__$Parser_ParseError();
	}
	,synchronize: function() {
		this.advance();
		while(!this.isAtEnd()) switch(this.peek().type._hx_index) {
		case 26:case 29:case 30:case 32:case 35:case 36:case 40:
			return;
		default:
			this.advance();
		}
	}
	,__class__: cosy_Parser
};
var cosy__$Parser_ParseError = function(message) {
	cosy_Error.call(this,message);
};
cosy__$Parser_ParseError.__name__ = true;
cosy__$Parser_ParseError.__super__ = cosy_Error;
cosy__$Parser_ParseError.prototype = $extend(cosy_Error.prototype,{
	__class__: cosy__$Parser_ParseError
});
var cosy_Resolver = function(interpreter) {
	this.currentClass = cosy__$Resolver_ClassType.None;
	this.currentFunction = cosy__$Resolver_FunctionType.None;
	this.scopes = [];
	this.interpreter = interpreter;
};
cosy_Resolver.__name__ = true;
cosy_Resolver.prototype = {
	resolveStmts: function(stmts) {
		var returnToken = null;
		var _g = 0;
		while(_g < stmts.length) {
			var stmt = stmts[_g];
			++_g;
			if(stmt._hx_index == 10) {
				returnToken = stmt.keyword;
			} else if(returnToken != null) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(returnToken),"Unreachable code after return statement.");
				returnToken = null;
			}
			this.resolveStmt(stmt);
		}
	}
	,resolveStmt: function(stmt) {
		switch(stmt._hx_index) {
		case 0:
			this.beginScope();
			this.resolveStmts(stmt.statements);
			this.endScope();
			break;
		case 1:
			var _g14 = stmt.methods;
			var _g13 = stmt.superclass;
			var _g12 = stmt.name;
			var enclosingClass = this.currentClass;
			this.currentClass = cosy__$Resolver_ClassType.Class;
			this.declare(_g12);
			this.define(_g12);
			if(_g13 != null) {
				if(_g13._hx_index == 12) {
					var _g = _g13.name;
					if(_g12.lexeme == _g.lexeme) {
						cosy_Cosy.error(cosy_ErrorDataType.Token(_g),"A class cannot inherit from itself");
					}
				}
				this.currentClass = cosy__$Resolver_ClassType.Subclass;
				this.resolveExpr(_g13);
				this.beginScope();
				var this1 = this.scopes;
				var value = { name : new cosy_Token(cosy_TokenType.Super,"super",null,_g12.line), state : cosy__$Resolver_VariableState.Read, mutable : false};
				var _this = this1[this1.length - 1];
				if(__map_reserved["super"] != null) {
					_this.setReserved("super",value);
				} else {
					_this.h["super"] = value;
				}
			}
			this.beginScope();
			var this2 = this.scopes;
			var value1 = { name : new cosy_Token(cosy_TokenType.This,"this",null,_g12.line), state : cosy__$Resolver_VariableState.Read, mutable : false};
			var _this1 = this2[this2.length - 1];
			if(__map_reserved["this"] != null) {
				_this1.setReserved("this",value1);
			} else {
				_this1.h["this"] = value1;
			}
			var _g1 = 0;
			while(_g1 < _g14.length) {
				var method = _g14[_g1];
				++_g1;
				if(method._hx_index == 6) {
					var _g2 = method.name;
					this.resolveFunction(_g2,method.params,method.body,_g2.lexeme == "init" ? cosy__$Resolver_FunctionType.Initializer : cosy__$Resolver_FunctionType.Method);
				}
			}
			this.endScope();
			if(_g13 != null) {
				this.endScope();
			}
			this.currentClass = enclosingClass;
			break;
		case 2:
			this.resolveExpr(stmt.e);
			break;
		case 3:
			var _g11 = stmt.body;
			var _g8 = stmt.name;
			this.resolveExpr(stmt.from);
			this.resolveExpr(stmt.to);
			this.beginScope();
			if(_g8 != null) {
				this.declare(_g8);
				this.define(_g8);
			}
			if(_g11.length == 0) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(stmt.keyword),"Loop body is empty.");
			}
			this.resolveStmts(_g11);
			this.endScope();
			break;
		case 4:
			var _g28 = stmt.body;
			var _g26 = stmt.name;
			this.resolveExpr(stmt.array);
			this.beginScope();
			this.declare(_g26);
			this.define(_g26);
			if(_g28.length == 0) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g26),"Loop body is empty.");
			}
			this.resolveStmts(_g28);
			this.endScope();
			break;
		case 5:
			var _g3 = stmt.cond;
			if(_g3 != null) {
				this.resolveExpr(_g3);
			}
			this.beginScope();
			this.resolveStmts(stmt.body);
			this.endScope();
			break;
		case 6:
			var _g17 = stmt.name;
			this.declare(_g17);
			this.define(_g17);
			this.resolveFunction(_g17,stmt.params,stmt.body,cosy__$Resolver_FunctionType.Function);
			break;
		case 7:
			var _g4 = stmt.el;
			this.resolveExpr(stmt.cond);
			this.resolveStmt(stmt.then);
			if(_g4 != null) {
				this.resolveStmt(_g4);
			}
			break;
		case 8:
			var _g6 = stmt.init;
			var _g5 = stmt.name;
			this.declare(_g5,true);
			if(_g6 != null) {
				this.resolveExpr(_g6);
			}
			this.define(_g5,true);
			break;
		case 9:
			this.resolveExpr(stmt.e);
			break;
		case 10:
			var _g25 = stmt.value;
			var _g24 = stmt.keyword;
			if(this.currentFunction == cosy__$Resolver_FunctionType.None) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g24),"Cannot return from top-level code.");
			}
			if(_g25 != null) {
				if(this.currentFunction == cosy__$Resolver_FunctionType.Initializer) {
					cosy_Cosy.error(cosy_ErrorDataType.Token(_g24),"Cannot return value from an initializer.");
				}
				this.resolveExpr(_g25);
			}
			break;
		case 11:
			var _g16 = stmt.init;
			var _g15 = stmt.name;
			this.declare(_g15);
			if(_g16 != null) {
				this.resolveExpr(_g16);
			}
			this.define(_g15);
			break;
		}
	}
	,resolveExpr: function(expr) {
		switch(expr._hx_index) {
		case 0:
			var _g5 = expr.exprs;
			var _g = 0;
			while(_g < _g5.length) this.resolveExpr(_g5[_g++]);
			break;
		case 1:
			var _g7 = expr.name;
			var variable = this.findInScopes(_g7);
			if(variable != null && !variable.mutable) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g7),"Cannot reassign non-mutable variable.");
			}
			this.resolveExpr(expr.value);
			this.resolveLocal(expr,_g7,false);
			break;
		case 2:
			this.resolveExpr(expr.left);
			this.resolveExpr(expr.right);
			break;
		case 3:
			var _g15 = expr.$arguments;
			this.resolveExpr(expr.callee);
			var _g1 = 0;
			while(_g1 < _g15.length) this.resolveExpr(_g15[_g1++]);
			break;
		case 4:
			this.resolveExpr(expr.obj);
			break;
		case 5:
			this.resolveExpr(expr.e);
			break;
		case 6:
			break;
		case 7:
			this.resolveExpr(expr.left);
			this.resolveExpr(expr.right);
			break;
		case 8:
			this.resolveExpr(expr.value);
			this.resolveExpr(expr.obj);
			break;
		case 9:
			var _g2 = expr.keyword;
			if(this.currentClass == cosy__$Resolver_ClassType.None) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g2),"Cannot use \"this\" outside of a class.");
			} else {
				this.resolveLocal(expr,_g2,true);
			}
			break;
		case 10:
			var _g24 = expr.keyword;
			switch(this.currentClass._hx_index) {
			case 0:
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g24),"Cannot use \"super\" outside of a class.");
				break;
			case 1:
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g24),"Cannot use \"super\" in a class with no superclass.");
				break;
			case 2:
				break;
			}
			this.resolveLocal(expr,_g24,true);
			break;
		case 11:
			this.resolveExpr(expr.right);
			break;
		case 12:
			var _g6 = expr.name;
			var tmp;
			var this1 = this.scopes;
			var key = _g6.lexeme;
			var _this = this1[this1.length - 1];
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				var this2 = this.scopes;
				var key1 = _g6.lexeme;
				var _this1 = this2[this2.length - 1];
				tmp = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).state._hx_index == 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g6),"Cannot read local variable in its own initializer");
			}
			if(StringTools.startsWith(_g6.lexeme,"_")) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g6),"Variables starting with _ are considered unused.");
			}
			this.resolveLocal(expr,_g6,true);
			break;
		case 13:
			this.resolveFunction(null,expr.params,expr.body,cosy__$Resolver_FunctionType.Function);
			break;
		}
	}
	,resolveFunction: function(name,params,body,type) {
		var enclosingFunction = this.currentFunction;
		this.currentFunction = type;
		this.beginScope();
		var _g = 0;
		while(_g < params.length) {
			var param = params[_g];
			++_g;
			this.declare(param.name);
			this.define(param.name);
		}
		this.resolveStmts(body);
		this.endScope();
		this.currentFunction = enclosingFunction;
	}
	,beginScope: function() {
		this.scopes.push(new haxe_ds_StringMap());
	}
	,endScope: function() {
		var _g = new haxe_iterators_MapKeyValueIterator(this.scopes.pop());
		while(_g.hasNext()) {
			var variable = _g.next().value;
			if(StringTools.startsWith(variable.name.lexeme,"_")) {
				continue;
			}
			if(variable.state._hx_index == 1) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(variable.name),"Local variable is not used.");
			}
		}
	}
	,declare: function(name,mutable) {
		if(mutable == null) {
			mutable = false;
		}
		var this1 = this.scopes;
		var scope = this1[this1.length - 1];
		var key = name.lexeme;
		if(__map_reserved[key] != null ? scope.existsReserved(key) : scope.h.hasOwnProperty(key)) {
			cosy_Cosy.error(cosy_ErrorDataType.Token(name),"Variable with this name already declared in this scope.");
		} else if(this.findInScopes(name) != null) {
			cosy_Cosy.error(cosy_ErrorDataType.Token(name),"Shadows existing variable.");
		}
		var key1 = name.lexeme;
		var value = { name : name, state : cosy__$Resolver_VariableState.Declared, mutable : mutable};
		if(__map_reserved[key1] != null) {
			scope.setReserved(key1,value);
		} else {
			scope.h[key1] = value;
		}
	}
	,define: function(name,mutable) {
		if(mutable == null) {
			mutable = false;
		}
		var this1 = this.scopes;
		var key = name.lexeme;
		var _this = this1[this1.length - 1];
		var value = { name : name, state : cosy__$Resolver_VariableState.Defined, mutable : mutable};
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,resolveLocal: function(expr,name,isRead) {
		var i = this.scopes.length - 1;
		while(i >= 0) {
			var scope = this.scopes[i];
			var key = name.lexeme;
			if(__map_reserved[key] != null ? scope.existsReserved(key) : scope.h.hasOwnProperty(key)) {
				this.interpreter.resolve(expr,this.scopes.length - 1 - i);
				if(isRead) {
					var key1 = name.lexeme;
					(__map_reserved[key1] != null ? scope.getReserved(key1) : scope.h[key1]).state = cosy__$Resolver_VariableState.Read;
				}
				return;
			}
			--i;
		}
		if(name.lexeme == "clock" || name.lexeme == "random" || name.lexeme == "str_length" || name.lexeme == "str_charAt" || name.lexeme == "input") {
			return;
		}
		cosy_Cosy.error(cosy_ErrorDataType.Token(name),"Variable not declared in this scope.");
	}
	,findInScopes: function(name) {
		var identifier = name.lexeme;
		var i = this.scopes.length - 1;
		while(i >= 0) {
			var scope = this.scopes[i];
			if(__map_reserved[identifier] != null ? scope.existsReserved(identifier) : scope.h.hasOwnProperty(identifier)) {
				return __map_reserved[identifier] != null ? scope.getReserved(identifier) : scope.h[identifier];
			}
			--i;
		}
		return null;
	}
	,__class__: cosy_Resolver
};
var cosy__$Resolver_VariableState = $hxEnums["cosy._Resolver.VariableState"] = { __ename__ : true, __constructs__ : ["Declared","Defined","Read"]
	,Declared: {_hx_index:0,__enum__:"cosy._Resolver.VariableState",toString:$estr}
	,Defined: {_hx_index:1,__enum__:"cosy._Resolver.VariableState",toString:$estr}
	,Read: {_hx_index:2,__enum__:"cosy._Resolver.VariableState",toString:$estr}
};
var cosy__$Resolver_FunctionType = $hxEnums["cosy._Resolver.FunctionType"] = { __ename__ : true, __constructs__ : ["None","Method","Initializer","Function"]
	,None: {_hx_index:0,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Method: {_hx_index:1,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Initializer: {_hx_index:2,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
	,Function: {_hx_index:3,__enum__:"cosy._Resolver.FunctionType",toString:$estr}
};
var cosy__$Resolver_ClassType = $hxEnums["cosy._Resolver.ClassType"] = { __ename__ : true, __constructs__ : ["None","Class","Subclass"]
	,None: {_hx_index:0,__enum__:"cosy._Resolver.ClassType",toString:$estr}
	,Class: {_hx_index:1,__enum__:"cosy._Resolver.ClassType",toString:$estr}
	,Subclass: {_hx_index:2,__enum__:"cosy._Resolver.ClassType",toString:$estr}
};
var cosy_Return = function(value) {
	cosy_Error.call(this);
	this.value = value;
};
cosy_Return.__name__ = true;
cosy_Return.__super__ = cosy_Error;
cosy_Return.prototype = $extend(cosy_Error.prototype,{
	__class__: cosy_Return
});
var cosy_RuntimeError = function(token,message) {
	cosy_Error.call(this,message);
	this.token = token;
};
cosy_RuntimeError.__name__ = true;
cosy_RuntimeError.__super__ = cosy_Error;
cosy_RuntimeError.prototype = $extend(cosy_Error.prototype,{
	__class__: cosy_RuntimeError
});
var cosy_TokenType = $hxEnums["cosy.TokenType"] = { __ename__ : true, __constructs__ : ["LeftParen","RightParen","LeftBrace","RightBrace","LeftBracket","RightBracket","Comma","Dot","DotDot","Minus","Plus","Slash","Star","Underscore","Bang","BangEqual","Equal","EqualEqual","Greater","GreaterEqual","Less","LessEqual","Identifier","String","Number","And","Class","Else","False","Fn","For","In","If","Mut","Or","Print","Return","Super","This","True","Var","BooleanType","NumberType","StringType","FunctionType","ArrayType","Eof"]
	,LeftParen: {_hx_index:0,__enum__:"cosy.TokenType",toString:$estr}
	,RightParen: {_hx_index:1,__enum__:"cosy.TokenType",toString:$estr}
	,LeftBrace: {_hx_index:2,__enum__:"cosy.TokenType",toString:$estr}
	,RightBrace: {_hx_index:3,__enum__:"cosy.TokenType",toString:$estr}
	,LeftBracket: {_hx_index:4,__enum__:"cosy.TokenType",toString:$estr}
	,RightBracket: {_hx_index:5,__enum__:"cosy.TokenType",toString:$estr}
	,Comma: {_hx_index:6,__enum__:"cosy.TokenType",toString:$estr}
	,Dot: {_hx_index:7,__enum__:"cosy.TokenType",toString:$estr}
	,DotDot: {_hx_index:8,__enum__:"cosy.TokenType",toString:$estr}
	,Minus: {_hx_index:9,__enum__:"cosy.TokenType",toString:$estr}
	,Plus: {_hx_index:10,__enum__:"cosy.TokenType",toString:$estr}
	,Slash: {_hx_index:11,__enum__:"cosy.TokenType",toString:$estr}
	,Star: {_hx_index:12,__enum__:"cosy.TokenType",toString:$estr}
	,Underscore: {_hx_index:13,__enum__:"cosy.TokenType",toString:$estr}
	,Bang: {_hx_index:14,__enum__:"cosy.TokenType",toString:$estr}
	,BangEqual: {_hx_index:15,__enum__:"cosy.TokenType",toString:$estr}
	,Equal: {_hx_index:16,__enum__:"cosy.TokenType",toString:$estr}
	,EqualEqual: {_hx_index:17,__enum__:"cosy.TokenType",toString:$estr}
	,Greater: {_hx_index:18,__enum__:"cosy.TokenType",toString:$estr}
	,GreaterEqual: {_hx_index:19,__enum__:"cosy.TokenType",toString:$estr}
	,Less: {_hx_index:20,__enum__:"cosy.TokenType",toString:$estr}
	,LessEqual: {_hx_index:21,__enum__:"cosy.TokenType",toString:$estr}
	,Identifier: {_hx_index:22,__enum__:"cosy.TokenType",toString:$estr}
	,String: {_hx_index:23,__enum__:"cosy.TokenType",toString:$estr}
	,Number: {_hx_index:24,__enum__:"cosy.TokenType",toString:$estr}
	,And: {_hx_index:25,__enum__:"cosy.TokenType",toString:$estr}
	,Class: {_hx_index:26,__enum__:"cosy.TokenType",toString:$estr}
	,Else: {_hx_index:27,__enum__:"cosy.TokenType",toString:$estr}
	,False: {_hx_index:28,__enum__:"cosy.TokenType",toString:$estr}
	,Fn: {_hx_index:29,__enum__:"cosy.TokenType",toString:$estr}
	,For: {_hx_index:30,__enum__:"cosy.TokenType",toString:$estr}
	,In: {_hx_index:31,__enum__:"cosy.TokenType",toString:$estr}
	,If: {_hx_index:32,__enum__:"cosy.TokenType",toString:$estr}
	,Mut: {_hx_index:33,__enum__:"cosy.TokenType",toString:$estr}
	,Or: {_hx_index:34,__enum__:"cosy.TokenType",toString:$estr}
	,Print: {_hx_index:35,__enum__:"cosy.TokenType",toString:$estr}
	,Return: {_hx_index:36,__enum__:"cosy.TokenType",toString:$estr}
	,Super: {_hx_index:37,__enum__:"cosy.TokenType",toString:$estr}
	,This: {_hx_index:38,__enum__:"cosy.TokenType",toString:$estr}
	,True: {_hx_index:39,__enum__:"cosy.TokenType",toString:$estr}
	,Var: {_hx_index:40,__enum__:"cosy.TokenType",toString:$estr}
	,BooleanType: {_hx_index:41,__enum__:"cosy.TokenType",toString:$estr}
	,NumberType: {_hx_index:42,__enum__:"cosy.TokenType",toString:$estr}
	,StringType: {_hx_index:43,__enum__:"cosy.TokenType",toString:$estr}
	,FunctionType: {_hx_index:44,__enum__:"cosy.TokenType",toString:$estr}
	,ArrayType: {_hx_index:45,__enum__:"cosy.TokenType",toString:$estr}
	,Eof: {_hx_index:46,__enum__:"cosy.TokenType",toString:$estr}
};
var cosy_Scanner = function(source) {
	this.line = 1;
	this.current = 0;
	this.start = 0;
	this.tokens = [];
	this.source = source;
};
cosy_Scanner.__name__ = true;
cosy_Scanner.prototype = {
	scanTokens: function() {
		while(!this.isAtEnd()) {
			this.start = this.current;
			this.scanToken();
		}
		this.tokens.push(new cosy_Token(cosy_TokenType.Eof,"",null,this.line));
		return this.tokens;
	}
	,scanToken: function() {
		var c = this.advance();
		switch(c) {
		case 10:
			this.line++;
			break;
		case 9:case 13:case 32:
			break;
		case 33:
			this.addToken(this.match(61) ? cosy_TokenType.BangEqual : cosy_TokenType.Bang);
			break;
		case 39:
			this.string();
			break;
		case 40:
			this.addToken(cosy_TokenType.LeftParen);
			break;
		case 41:
			this.addToken(cosy_TokenType.RightParen);
			break;
		case 42:
			this.addToken(cosy_TokenType.Star);
			break;
		case 43:
			this.addToken(cosy_TokenType.Plus);
			break;
		case 44:
			this.addToken(cosy_TokenType.Comma);
			break;
		case 45:
			this.addToken(cosy_TokenType.Minus);
			break;
		case 46:
			this.addToken(this.match(46) ? cosy_TokenType.DotDot : cosy_TokenType.Dot);
			break;
		case 47:
			if(this.match(47)) {
				while(this.peek() != 10 && !this.isAtEnd()) this.advance();
			} else {
				this.addToken(cosy_TokenType.Slash);
			}
			break;
		case 60:
			this.addToken(this.match(61) ? cosy_TokenType.LessEqual : cosy_TokenType.Less);
			break;
		case 61:
			this.addToken(this.match(61) ? cosy_TokenType.EqualEqual : cosy_TokenType.Equal);
			break;
		case 62:
			this.addToken(this.match(61) ? cosy_TokenType.GreaterEqual : cosy_TokenType.Greater);
			break;
		case 91:
			this.addToken(cosy_TokenType.LeftBracket);
			break;
		case 93:
			this.addToken(cosy_TokenType.RightBracket);
			break;
		case 95:
			if(!this.isAlpha(this.peek())) {
				this.addToken(cosy_TokenType.Underscore);
			} else if(this.isDigit(c)) {
				this.number();
			} else if(this.isAlpha(c)) {
				this.identifier();
			} else {
				cosy_Cosy.error(cosy_ErrorDataType.Line(this.line),"Unexpected character: " + String.fromCodePoint(c));
			}
			break;
		case 123:
			this.addToken(cosy_TokenType.LeftBrace);
			break;
		case 125:
			this.addToken(cosy_TokenType.RightBrace);
			break;
		default:
			if(this.isDigit(c)) {
				this.number();
			} else if(this.isAlpha(c)) {
				this.identifier();
			} else {
				cosy_Cosy.error(cosy_ErrorDataType.Line(this.line),"Unexpected character: " + String.fromCodePoint(c));
			}
		}
	}
	,identifier: function() {
		while(this.isAlphaNumeric(this.peek())) this.advance();
		var text = this.source.substring(this.start,this.current);
		var _this = cosy_Scanner.keywords;
		var _g = __map_reserved[text] != null ? _this.getReserved(text) : _this.h[text];
		this.addToken(_g == null ? cosy_TokenType.Identifier : _g);
	}
	,string: function() {
		while((this.peek() != 39 || this.peekPrevious() == 92) && !this.isAtEnd()) {
			if(this.peek() == 10) {
				this.line++;
			}
			this.advance();
		}
		if(this.isAtEnd()) {
			cosy_Cosy.error(cosy_ErrorDataType.Line(this.line),"Unterminated string.");
			return;
		}
		this.advance();
		this.addToken(cosy_TokenType.String,StringTools.replace(this.source.substring(this.start + 1,this.current - 1),"\\'","'"));
	}
	,number: function() {
		while(this.isDigit(this.peek())) this.advance();
		if(this.peek() == 46 && this.isDigit(this.peekNext())) {
			this.advance();
			while(this.isDigit(this.peek())) this.advance();
		}
		this.addToken(cosy_TokenType.Number,parseFloat(this.source.substring(this.start,this.current)));
	}
	,isDigit: function(c) {
		if(c >= 48) {
			return c <= 57;
		} else {
			return false;
		}
	}
	,isAlpha: function(c) {
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return c == 95;
		} else {
			return true;
		}
	}
	,isAlphaNumeric: function(c) {
		if(!this.isAlpha(c)) {
			return this.isDigit(c);
		} else {
			return true;
		}
	}
	,match: function(expected) {
		if(this.isAtEnd()) {
			return false;
		}
		if(HxOverrides.cca(this.source,this.current) != expected) {
			return false;
		}
		this.current++;
		return true;
	}
	,peek: function() {
		if(this.isAtEnd()) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current);
	}
	,peekNext: function() {
		if(this.current + 1 >= this.source.length) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current + 1);
	}
	,peekPrevious: function() {
		if(this.current - 1 >= this.source.length) {
			return 0;
		}
		return HxOverrides.cca(this.source,this.current - 1);
	}
	,advance: function() {
		this.current++;
		return HxOverrides.cca(this.source,this.current - 1);
	}
	,addToken: function(type,literal) {
		this.tokens.push(new cosy_Token(type,this.source.substring(this.start,this.current),literal,this.line));
	}
	,isAtEnd: function() {
		return this.current >= this.source.length;
	}
	,__class__: cosy_Scanner
};
var cosy_Stmt = $hxEnums["cosy.Stmt"] = { __ename__ : true, __constructs__ : ["Block","Class","Expression","For","ForArray","ForCondition","Function","If","Mut","Print","Return","Var"]
	,Block: ($_=function(statements) { return {_hx_index:0,statements:statements,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["statements"],$_)
	,Class: ($_=function(name,superclass,methods) { return {_hx_index:1,name:name,superclass:superclass,methods:methods,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","superclass","methods"],$_)
	,Expression: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["e"],$_)
	,For: ($_=function(keyword,name,from,to,body) { return {_hx_index:3,keyword:keyword,name:name,from:from,to:to,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["keyword","name","from","to","body"],$_)
	,ForArray: ($_=function(name,array,body) { return {_hx_index:4,name:name,array:array,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","array","body"],$_)
	,ForCondition: ($_=function(cond,body) { return {_hx_index:5,cond:cond,body:body,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["cond","body"],$_)
	,Function: ($_=function(name,params,body,returnType) { return {_hx_index:6,name:name,params:params,body:body,returnType:returnType,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","params","body","returnType"],$_)
	,If: ($_=function(cond,then,el) { return {_hx_index:7,cond:cond,then:then,el:el,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["cond","then","el"],$_)
	,Mut: ($_=function(name,init) { return {_hx_index:8,name:name,init:init,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","init"],$_)
	,Print: ($_=function(e) { return {_hx_index:9,e:e,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Return: ($_=function(keyword,value) { return {_hx_index:10,keyword:keyword,value:value,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["keyword","value"],$_)
	,Var: ($_=function(name,init) { return {_hx_index:11,name:name,init:init,__enum__:"cosy.Stmt",toString:$estr}; },$_.__params__ = ["name","init"],$_)
};
var cosy_Token = function(type,lexeme,literal,line) {
	this.type = type;
	this.lexeme = lexeme;
	this.literal = literal;
	this.line = line;
};
cosy_Token.__name__ = true;
cosy_Token.prototype = {
	toString: function() {
		return "" + Std.string(this.type) + " " + this.lexeme + " " + Std.string(this.literal);
	}
	,__class__: cosy_Token
};
var cosy_VariableType = $hxEnums["cosy.VariableType"] = { __ename__ : true, __constructs__ : ["Unknown","Void","Boolean","Number","Text","Instance","Function","Array"]
	,Unknown: {_hx_index:0,__enum__:"cosy.VariableType",toString:$estr}
	,Void: {_hx_index:1,__enum__:"cosy.VariableType",toString:$estr}
	,Boolean: {_hx_index:2,__enum__:"cosy.VariableType",toString:$estr}
	,Number: {_hx_index:3,__enum__:"cosy.VariableType",toString:$estr}
	,Text: {_hx_index:4,__enum__:"cosy.VariableType",toString:$estr}
	,Instance: {_hx_index:5,__enum__:"cosy.VariableType",toString:$estr}
	,Function: ($_=function(paramTypes,returnType) { return {_hx_index:6,paramTypes:paramTypes,returnType:returnType,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["paramTypes","returnType"],$_)
	,Array: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"cosy.VariableType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
var cosy_Typer = function() {
	this.inferredReturnType = cosy_VariableType.Void;
	this.typedReturnType = cosy_VariableType.Unknown;
	this.variableTypes = new haxe_ds_StringMap();
	var _this = this.variableTypes;
	var value = cosy_VariableType.Number;
	if(__map_reserved["clock"] != null) {
		_this.setReserved("clock",value);
	} else {
		_this.h["clock"] = value;
	}
	var _this1 = this.variableTypes;
	var value1 = cosy_VariableType.Number;
	if(__map_reserved["random"] != null) {
		_this1.setReserved("random",value1);
	} else {
		_this1.h["random"] = value1;
	}
	var _this2 = this.variableTypes;
	var value2 = cosy_VariableType.Number;
	if(__map_reserved["str_length"] != null) {
		_this2.setReserved("str_length",value2);
	} else {
		_this2.h["str_length"] = value2;
	}
	var _this3 = this.variableTypes;
	var value3 = cosy_VariableType.Text;
	if(__map_reserved["str_charAt"] != null) {
		_this3.setReserved("str_charAt",value3);
	} else {
		_this3.h["str_charAt"] = value3;
	}
	var _this4 = this.variableTypes;
	var value4 = cosy_VariableType.Text;
	if(__map_reserved["input"] != null) {
		_this4.setReserved("input",value4);
	} else {
		_this4.h["input"] = value4;
	}
};
cosy_Typer.__name__ = true;
cosy_Typer.prototype = {
	typeStmts: function(stmts) {
		var _g = 0;
		while(_g < stmts.length) this.typeStmt(stmts[_g++]);
	}
	,typeStmt: function(stmt) {
		switch(stmt._hx_index) {
		case 0:
			this.typeStmts(stmt.statements);
			break;
		case 1:
			this.typeStmts(stmt.methods);
			break;
		case 2:
			this.typeExpr(stmt.e);
			break;
		case 3:
			var _g11 = stmt.body;
			var _g10 = stmt.to;
			var _g8 = stmt.name;
			var _g7 = stmt.keyword;
			switch(this.typeExpr(stmt.from)._hx_index) {
			case 0:
				cosy_Cosy.warning(cosy_ErrorDataType.Token(_g7),"\"From\" clause has type Unknown");
				break;
			case 3:
				break;
			default:
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g7),"\"From\" clause must evaluate to a number");
			}
			switch(this.typeExpr(_g10)._hx_index) {
			case 0:
				cosy_Cosy.warning(cosy_ErrorDataType.Token(_g7),"\"To\" clause has type Unknown");
				break;
			case 3:
				break;
			default:
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g7),"\"To\" clause must evaluate to a number");
			}
			if(_g8 != null) {
				var key = _g8.lexeme;
				var _this = this.variableTypes;
				var value = cosy_VariableType.Number;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
			}
			this.typeStmts(_g11);
			break;
		case 4:
			var key1 = stmt.name.lexeme;
			var _this1 = this.variableTypes;
			var value1 = cosy_VariableType.Number;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
			this.typeStmts(stmt.body);
			break;
		case 5:
			this.typeStmts(stmt.body);
			break;
		case 6:
			this.handleFunc(stmt.name,stmt.params,stmt.body,stmt.returnType);
			break;
		case 7:
			var _g4 = stmt.el;
			this.typeStmt(stmt.then);
			if(_g4 != null) {
				this.typeStmt(_g4);
			}
			break;
		case 8:
			var _g6 = stmt.init;
			var _g5 = stmt.name;
			var initType = _g6 != null ? this.typeExpr(_g6) : cosy_VariableType.Unknown;
			if(initType._hx_index == 1) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g5),"Cannot assign Void to a variable");
			}
			var key2 = _g5.lexeme;
			var _this2 = this.variableTypes;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,initType);
			} else {
				_this2.h[key2] = initType;
			}
			break;
		case 9:
			this.typeExpr(stmt.e);
			break;
		case 10:
			var _g25 = stmt.value;
			if(_g25 != null) {
				this.inferredReturnType = this.typeExpr(_g25);
				if(!this.matchType(this.inferredReturnType,this.typedReturnType)) {
					cosy_Cosy.error(cosy_ErrorDataType.Token(stmt.keyword),"Function expected to return " + this.formatType(this.typedReturnType) + " but got " + this.formatType(this.inferredReturnType));
				}
			} else {
				this.inferredReturnType = cosy_VariableType.Void;
			}
			break;
		case 11:
			var _g16 = stmt.init;
			var _g15 = stmt.name;
			var initType1 = _g16 != null ? this.typeExpr(_g16) : cosy_VariableType.Unknown;
			if(initType1._hx_index == 1) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g15),"Cannot assign Void to a variable");
			}
			var key3 = _g15.lexeme;
			var _this3 = this.variableTypes;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,initType1);
			} else {
				_this3.h[key3] = initType1;
			}
			break;
		}
	}
	,typeExpr: function(expr) {
		var ret;
		switch(expr._hx_index) {
		case 0:
			var _g5 = expr.exprs;
			var _g4 = expr.keyword;
			var arrayType = cosy_VariableType.Unknown;
			var _g = 0;
			var _g1 = _g5.length;
			while(_g < _g1) {
				var i = _g++;
				var elemType = this.typeExpr(_g5[i]);
				if(elemType._hx_index != 0) {
					if(arrayType._hx_index == 0) {
						arrayType = elemType;
					} else if(!this.matchType(elemType,arrayType)) {
						cosy_Cosy.error(cosy_ErrorDataType.Token(_g4),"Array values expected to be " + this.formatType(arrayType) + " but got " + this.formatType(elemType) + " at index " + i + ".");
					}
				}
			}
			return cosy_VariableType.Array(arrayType);
		case 1:
			var _g7 = expr.name;
			var assigningType = this.typeExpr(expr.value);
			var key = _g7.lexeme;
			var _this = this.variableTypes;
			var varType = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(varType == null ? false : varType._hx_index == 0) {
				var key1 = _g7.lexeme;
				var _this1 = this.variableTypes;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,assigningType);
				} else {
					_this1.h[key1] = assigningType;
				}
			} else if(!this.matchType(varType,assigningType)) {
				cosy_Cosy.error(cosy_ErrorDataType.Token(_g7),"Cannot assign " + this.formatType(assigningType) + " to " + this.formatType(varType));
			}
			return assigningType;
		case 2:
			var leftType = this.typeExpr(expr.left);
			var rightType = this.typeExpr(expr.right);
			if(leftType._hx_index == 4 || rightType._hx_index == 4) {
				return cosy_VariableType.Text;
			}
			if(leftType._hx_index == 3 || rightType._hx_index == 3) {
				return cosy_VariableType.Number;
			}
			return cosy_VariableType.Unknown;
		case 3:
			var _g15 = expr.$arguments;
			var _g14 = expr.paren;
			var calleeType = this.typeExpr(expr.callee);
			var type = cosy_VariableType.Unknown;
			if(calleeType._hx_index == 6) {
				var _g2 = calleeType.paramTypes;
				type = calleeType.returnType;
				var _g3 = [];
				var _g11 = 0;
				while(_g11 < _g15.length) _g3.push(this.typeExpr(_g15[_g11++]));
				if(_g15.length != _g2.length) {
					cosy_Cosy.error(cosy_ErrorDataType.Token(_g14),"Expected " + _g2.length + " argument(s) but got " + _g15.length + ".");
				} else {
					var _g21 = 0;
					var _g31 = _g2.length;
					while(_g21 < _g31) {
						var i1 = _g21++;
						if(_g3[i1]._hx_index == 0) {
							cosy_Cosy.warning(cosy_ErrorDataType.Token(_g14),"Argument " + (i1 + 1) + " has type Unknown.");
						}
						if(!this.matchType(_g3[i1],_g2[i1])) {
							cosy_Cosy.error(cosy_ErrorDataType.Token(_g14),"Expected argument " + (i1 + 1) + " to be " + this.formatType(_g2[i1]) + " but got " + this.formatType(_g3[i1]) + ".");
						}
					}
				}
			}
			ret = type;
			break;
		case 4:
			ret = cosy_VariableType.Unknown;
			break;
		case 5:
			ret = this.typeExpr(expr.e);
			break;
		case 6:
			var _g111 = expr.v;
			ret = typeof(_g111) == "number" ? cosy_VariableType.Number : typeof(_g111) == "string" ? cosy_VariableType.Text : typeof(_g111) == "boolean" ? cosy_VariableType.Boolean : cosy_VariableType.Unknown;
			break;
		case 7:
			ret = cosy_VariableType.Boolean;
			break;
		case 8:
			ret = cosy_VariableType.Unknown;
			break;
		case 9:
			ret = cosy_VariableType.Instance;
			break;
		case 10:
			ret = cosy_VariableType.Instance;
			break;
		case 11:
			ret = this.typeExpr(expr.right);
			break;
		case 12:
			var _g6 = expr.name;
			var key2 = _g6.lexeme;
			var _this2 = this.variableTypes;
			if(__map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2)) {
				var key3 = _g6.lexeme;
				var _this3 = this.variableTypes;
				if(__map_reserved[key3] != null) {
					return _this3.getReserved(key3);
				} else {
					return _this3.h[key3];
				}
			} else {
				return cosy_VariableType.Unknown;
			}
			break;
		case 13:
			ret = this.handleFunc(null,expr.params,expr.body,expr.returnType);
			break;
		}
		return ret;
	}
	,handleFunc: function(name,params,body,returnType) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) _g.push(params[_g1++].type);
		var _g2 = 0;
		while(_g2 < params.length) {
			var param = params[_g2];
			++_g2;
			var key = param.name.lexeme;
			var value = param.type;
			var _this = this.variableTypes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		this.typedReturnType = returnType;
		this.inferredReturnType = cosy_VariableType.Void;
		this.typeStmts(body);
		var computedReturnType = returnType._hx_index == 0 ? this.inferredReturnType : returnType;
		if(name != null) {
			var key1 = name.lexeme;
			var value1 = cosy_VariableType.Function(_g,computedReturnType);
			var _this1 = this.variableTypes;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
		return cosy_VariableType.Function(_g,computedReturnType);
	}
	,matchType: function(to,from) {
		switch(from._hx_index) {
		case 0:
			return true;
		case 6:
			var _g3 = from.returnType;
			var _g2 = from.paramTypes;
			if(to._hx_index == 6) {
				var _g5 = to.returnType;
				var _g4 = to.paramTypes;
				if(_g4.length != _g2.length) {
					return false;
				}
				var _g = 0;
				while(_g < _g4.length) {
					var param1 = _g4[_g++];
					var _g1 = 0;
					while(_g1 < _g2.length) if(!this.matchType(param1,_g2[_g1++])) {
						return false;
					}
				}
				return this.matchType(_g5,_g3);
			} else {
				return to == from;
			}
			break;
		case 7:
			if(to._hx_index == 7) {
				return this.matchType(to.type,from.type);
			} else {
				return to == from;
			}
			break;
		default:
			return to == from;
		}
	}
	,formatType: function(type) {
		switch(type._hx_index) {
		case 2:
			return "Bool";
		case 3:
			return "Num";
		case 4:
			return "Str";
		case 6:
			var _g2 = type.returnType;
			var _g1 = type.paramTypes;
			var _g = [];
			var _g11 = 0;
			while(_g11 < _g1.length) _g.push(this.formatType(_g1[_g11++]));
			var returnStr = _g2._hx_index == 1 ? "" : " -> " + this.formatType(_g2);
			var funcStr = "Fn(" + _g.join(", ") + ")" + returnStr;
			if(_g2._hx_index == 1) {
				return funcStr;
			} else {
				return "(" + funcStr + ")";
			}
			break;
		case 7:
			var _g3 = type.type;
			if(_g3._hx_index == 0) {
				return "Array";
			} else {
				return "Array(" + this.formatType(_g3) + ")";
			}
			break;
		default:
			return "" + Std.string(type);
		}
	}
	,__class__: cosy_Typer
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = true;
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
cosy_Interpreter.__meta__ = { fields : { evaluate : { SuppressWarnings : ["checkstyle:CyclomaticComplexity","checkstyle:NestedControlFlow","checkstyle:MethodLength"]}}};
cosy_Interpreter.uninitialized = { };
cosy_Cosy.interpreter = new cosy_Interpreter();
cosy_Cosy.hadError = false;
cosy_Cosy.hadRuntimeError = false;
cosy_Cosy.prettyPrint = false;
cosy_Cosy.javascript = false;
cosy_Cosy.testing = false;
cosy_Cosy.testOutput = "";
cosy_Scanner.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = cosy_TokenType.And;
		if(__map_reserved["and"] != null) {
			_g.setReserved("and",value);
		} else {
			_g.h["and"] = value;
		}
	}
	{
		var value1 = cosy_TokenType.Class;
		if(__map_reserved["class"] != null) {
			_g.setReserved("class",value1);
		} else {
			_g.h["class"] = value1;
		}
	}
	{
		var value2 = cosy_TokenType.Else;
		if(__map_reserved["else"] != null) {
			_g.setReserved("else",value2);
		} else {
			_g.h["else"] = value2;
		}
	}
	{
		var value3 = cosy_TokenType.False;
		if(__map_reserved["false"] != null) {
			_g.setReserved("false",value3);
		} else {
			_g.h["false"] = value3;
		}
	}
	{
		var value4 = cosy_TokenType.For;
		if(__map_reserved["for"] != null) {
			_g.setReserved("for",value4);
		} else {
			_g.h["for"] = value4;
		}
	}
	{
		var value5 = cosy_TokenType.Fn;
		if(__map_reserved["fn"] != null) {
			_g.setReserved("fn",value5);
		} else {
			_g.h["fn"] = value5;
		}
	}
	{
		var value6 = cosy_TokenType.In;
		if(__map_reserved["in"] != null) {
			_g.setReserved("in",value6);
		} else {
			_g.h["in"] = value6;
		}
	}
	{
		var value7 = cosy_TokenType.If;
		if(__map_reserved["if"] != null) {
			_g.setReserved("if",value7);
		} else {
			_g.h["if"] = value7;
		}
	}
	{
		var value8 = cosy_TokenType.Mut;
		if(__map_reserved["mut"] != null) {
			_g.setReserved("mut",value8);
		} else {
			_g.h["mut"] = value8;
		}
	}
	{
		var value9 = cosy_TokenType.Or;
		if(__map_reserved["or"] != null) {
			_g.setReserved("or",value9);
		} else {
			_g.h["or"] = value9;
		}
	}
	{
		var value10 = cosy_TokenType.Print;
		if(__map_reserved["print"] != null) {
			_g.setReserved("print",value10);
		} else {
			_g.h["print"] = value10;
		}
	}
	{
		var value11 = cosy_TokenType.Return;
		if(__map_reserved["return"] != null) {
			_g.setReserved("return",value11);
		} else {
			_g.h["return"] = value11;
		}
	}
	{
		var value12 = cosy_TokenType.Super;
		if(__map_reserved["super"] != null) {
			_g.setReserved("super",value12);
		} else {
			_g.h["super"] = value12;
		}
	}
	{
		var value13 = cosy_TokenType.This;
		if(__map_reserved["this"] != null) {
			_g.setReserved("this",value13);
		} else {
			_g.h["this"] = value13;
		}
	}
	{
		var value14 = cosy_TokenType.True;
		if(__map_reserved["true"] != null) {
			_g.setReserved("true",value14);
		} else {
			_g.h["true"] = value14;
		}
	}
	{
		var value15 = cosy_TokenType.Var;
		if(__map_reserved["var"] != null) {
			_g.setReserved("var",value15);
		} else {
			_g.h["var"] = value15;
		}
	}
	{
		var value16 = cosy_TokenType.BooleanType;
		if(__map_reserved["Bool"] != null) {
			_g.setReserved("Bool",value16);
		} else {
			_g.h["Bool"] = value16;
		}
	}
	{
		var value17 = cosy_TokenType.NumberType;
		if(__map_reserved["Num"] != null) {
			_g.setReserved("Num",value17);
		} else {
			_g.h["Num"] = value17;
		}
	}
	{
		var value18 = cosy_TokenType.StringType;
		if(__map_reserved["Str"] != null) {
			_g.setReserved("Str",value18);
		} else {
			_g.h["Str"] = value18;
		}
	}
	{
		var value19 = cosy_TokenType.FunctionType;
		if(__map_reserved["Fn"] != null) {
			_g.setReserved("Fn",value19);
		} else {
			_g.h["Fn"] = value19;
		}
	}
	{
		var value20 = cosy_TokenType.ArrayType;
		if(__map_reserved["Array"] != null) {
			_g.setReserved("Array",value20);
		} else {
			_g.h["Array"] = value20;
		}
	}
	$r = _g;
	return $r;
}(this));
cosy_Cosy.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cosy.js.map